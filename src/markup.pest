markup = _{ SOI ~ (raw | comment | liquid_tag | tag | output | content)* ~ EOI }

raw              =  { tag_start ~ "raw" ~ tag_end ~ raw_content ~ tag_start ~ "endraw" ~ tag_end }
raw_content      =  { raw_content_char* }
raw_content_char = _{ !(tag_start ~ "endraw" ~ tag_end) ~ ANY }

comment        = { "{" ~ comment_hashes ~ WC ~ comment_text ~ WC ~ POP ~ "}" }
comment_hashes = { PUSH("#"+) }
comment_text   = { (!(WC ~ PEEK ~ "}") ~ ANY)* }

tag      = { tag_start ~ tag_name ~ (s ~ tag_expr)? ~ tag_end }
tag_name = { function_name_first ~ function_name_char* }

output  = { output_start ~ output_expr ~ output_end }
content = { (!("{{" | "{%" | "{#") ~ ANY)+ }

tag_start    = _{ "{%" ~ WC ~ S }
tag_end      = _{ S ~ WC ~ "%}" }
output_start = _{ "{{" ~ WC ~ S }
output_end   = _{ S ~ WC ~ "}}" }

WC =  { ("+" | "-" | "~")? }
B  = _{ "\x20" | "\x09" | "\x0A" | "\x0D" }
S  = _{ B* }
LS = _{ ("\x20" | "\x09")* }
s  = _{ B+ }
ls = _{ ("\x20" | "\x09")+ }

// TODO: Some tokens will require whitespace, some wont.
tag_expr = _{ (S ~ tag_token ~ S)* }

// TODO: Prioritize words or paths? Parsers will need to call Query.as_word() or Word.as_query()
tag_token = _{
    multiline_string_literal
  | number
  | range
  | reserved_word ~ !name_char
  | word
  | query
  | symbol
}

output_expr = _{ (S ~ tag_token)+ }

liquid_tag        =  { tag_start ~ "liquid" ~ (s ~ line_statements)? ~ tag_end }
line_statements   =  { line_statement ~ (line_term ~ line_statement)* }
line_statement    = _{ LS ~ (line_comment | line_tag)? }
line_comment      =  { "#" ~ line_comment_text }
line_comment_text =  { line_comment_char* }
line_comment_char = _{ !(line_term | tag_end) ~ ANY }
line_tag          =  { tag_name ~ (ls ~ line_token ~ (LS ~ line_token ~ LS)*)? }
line_term         = _{ "\x0D"? ~ "\x0A" }

// TODO: need a newline sensitive version of `query`
// TODO: line comments
line_token = _{
    string_literal
  | number
  | range
  | reserved_word ~ !name_char
  | word
  | query
  | symbol
}

symbol = {
    "=="
  | "!="
  | "<>"
  | ">="
  | "<="
  | ">"
  | "<"
  | ":"
  | "||"
  | "|"
  | ","
  | "("
  | ")"
  | "="
}

reserved_word = {
    "true"
  | "false"
  | "and"
  | "or"
  | "in"
  | "not"
  | "contains"
  | "nil"
  | "null"
  | "if"
  | "else"
  | "with"
  | "as"
  | "for"
  | "required"
}

// NOTE: range literals can't contain newlines
// XXX: range integers can be negative, but start must be less than stop, even when reversed
range          =  { "(" ~ LS ~ range_argument ~ LS ~ ".." ~ LS ~ range_argument ~ LS ~ ")" }
range_argument = _{
    number
  | string_literal
  | query
}

multiline_string_literal = _{
    ("\x22" ~ multiline_double_quoted ~ "\x22")
  | ("\x27" ~ multiline_single_quoted ~ "\x27")
}

multiline_double_quoted = { multiline_double_quoted_char* }
multiline_single_quoted = { multiline_single_quoted_char* }

multiline_double_quoted_char = _{
    multiline_unescaped
  | "\x27"
  | (ESC ~ "\x22")
  | (ESC ~ escapable)
}

multiline_single_quoted_char = _{
    multiline_unescaped
  | "\x22"
  | (ESC ~ "\x27")
  | (ESC ~ escapable)
}

multiline_unescaped = _{
    "\u{0A}"
  | "\u{09}"
  | "\u{0D}"
  | '\u{20}'..'\u{21}'
  | '\u{23}'..'\u{26}'
  | '\u{28}'..'\u{5B}'
  | '\u{5D}'..'\u{D7FF}'
  | '\u{E000}'..'\u{10FFFF}'
}

word       =  { word_first ~ word_char* ~ !("." | "[") }
word_first = _{
    ASCII_ALPHA
  | "_"
  | '\u{80}'..'\u{D7FF}'
  | '\u{E000}'..'\u{10FFFF}'
}
word_char  = _{ word_first | "-" | ASCII_DIGIT }

// Entry point for JSONPath query testing
_jsonpath = { SOI ~ (jsonpath_query | implicit_root_query) ~ EOI }

/* Modified JSONPath */
query = {
    jsonpath_query
  | implicit_root_query
}

jsonpath_query      = _{ root_identifier ~ segments }
implicit_root_query = _{ implicit_root_segment ~ segments }
segments            = _{ (S ~ segment)* }

root_identifier = _{ "$" }

selector = _{
    name_selector
  | wildcard_selector
  | slice_selector
  | index_selector
  | filter_selector
  | singular_query_selector
}

name_selector = _{ string_literal }

string_literal = _{
    ("\x22" ~ double_quoted ~ "\x22")
  | ("\x27" ~ single_quoted ~ "\x27")
}

double_quoted = { double_quoted_char* }
single_quoted = { single_quoted_char* }

double_quoted_char = _{
    unescaped
  | "\x27"
  | (ESC ~ "\x22")
  | (ESC ~ escapable)
}

single_quoted_char = _{
    unescaped
  | "\x22"
  | (ESC ~ "\x27")
  | (ESC ~ escapable)
}

ESC = _{ "\x5C" }

unescaped = _{
    '\u{20}'..'\u{21}'
  | '\u{23}'..'\u{26}'
  | '\u{28}'..'\u{5B}'
  | '\u{5D}'..'\u{D7FF}'
  | '\u{E000}'..'\u{10FFFF}'
}

escapable = _{
    "\x62"
  | "\x66"
  | "\x6E"
  | "\x72"
  | "\x74"
  | "/"
  | "\\"
  | ("\x75" ~ hexchar)
}

hexchar = _{
    non_surrogate
  | (high_surrogate ~ "\\u" ~ low_surrogate)
}

non_surrogate = _{
    ((ASCII_DIGIT | ^"A" | ^"B" | ^"C" | ^"E" | ^"F") ~ ASCII_HEX_DIGIT{3})
  | (^"D" ~ '\u{30}'..'\u{37}' ~ ASCII_HEX_DIGIT{2})
}

high_surrogate          = _{ ^"D" ~ ("8" | "9" | ^"A" | ^"B") ~ ASCII_HEX_DIGIT{2} }
low_surrogate           = _{ ^"D" ~ (^"C" | ^"D" | ^"E" | ^"F") ~ ASCII_HEX_DIGIT{2} }
wildcard_selector       =  { "*" }
index_selector          = @{ int }
int                     =  { "0" | ("-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }
slice_selector          =  { (start ~ S)? ~ ":" ~ S ~ (stop ~ S)? ~ (":" ~ (S ~ step)?)? }
start                   = @{ int }
stop                    = @{ int }
step                    = @{ int }
filter_selector         =  { "?" ~ S ~ logical_expr }
logical_expr            = _{ logical_or_expr }
logical_or_expr         =  { logical_and_expr ~ (S ~ "||" ~ S ~ logical_and_expr)* }
logical_and_expr        =  { basic_expr ~ (S ~ "&&" ~ S ~ basic_expr)* }
singular_query_selector =  { (root_identifier ~ singular_query_segments) | implicit_root_singular_query_segments }

basic_expr = _{
    paren_expr
  | comparison_expr
  | test_expr
}

paren_expr              =  { (logical_not_op ~ S)? ~ "(" ~ S ~ logical_expr ~ S ~ ")" }
logical_not_op          =  { "!" }
test_expr               =  { (logical_not_op ~ S)? ~ (filter_query | function_expr) }
filter_query            = _{ rel_query | root_query }
root_query              =  { jsonpath_query }
rel_query               =  { current_node_identifier ~ segments }
current_node_identifier = _{ "@" }
comparison_expr         =  { comparable ~ S ~ comparison_op ~ S ~ comparable }

literal = _{
    number
  | string_literal
  | true_literal
  | false_literal
  | null
}

comparable = _{
    literal
  | singular_query
  | function_expr
}

comparison_op = {
    "=="
  | "!="
  | "<="
  | ">="
  | "<"
  | ">"
}

// TODO: silencing singular_query and/or singular_query_segments leads to
// undesirable error messages.

singular_query                        = _{ rel_singular_query | abs_singular_query }
rel_singular_query                    =  { current_node_identifier ~ singular_query_segments }
abs_singular_query                    =  { root_identifier ~ singular_query_segments }
singular_query_segments               = _{ (S ~ (name_segment | index_segment))* }
implicit_root_singular_query_segments = _{ (implicit_root_name_segment | index_segment) ~ singular_query_segments }

name_segment = {
    ("[" ~ name_selector ~ "]")
  | ("." ~ member_name_shorthand)
}

implicit_root_name_segment = {
    ("[" ~ name_selector ~ "]")
  | member_name_shorthand
}

index_segment       =  { "[" ~ index_selector ~ "]" }
number              =  { (int | "-0") ~ frac? ~ exp? }
frac                =  { "." ~ ASCII_DIGIT+ }
exp                 =  { ^"e" ~ ("-" | "+")? ~ ASCII_DIGIT+ }
true_literal        =  { "true" }
false_literal       =  { "false" }
null                =  { "null" }
function_name       =  { function_name_first ~ function_name_char* }
function_name_first = _{ ASCII_ALPHA_LOWER }
function_name_char  = _{ function_name_first | "_" | ASCII_DIGIT }

function_expr = {
    function_name ~ "(" ~ S ~ (function_argument ~ (S ~ "," ~ S ~ function_argument)*)? ~ S ~ ")"
}

function_argument = _{
    filter_query
  | logical_expr
  | function_expr
  | literal
}

segment = _{
    child_segment
  | descendant_segment
}

implicit_root_segment = {
    bracketed_selection
  | member_name_shorthand
}

child_segment = {
    bracketed_selection
  | ("." ~ (wildcard_selector | member_name_shorthand))
}

bracketed_selection   = { "[" ~ S ~ selector ~ (S ~ "," ~ S ~ selector)* ~ S ~ "]" }
member_name_shorthand = { name_first ~ name_char* }

name_first = _{
    ASCII_ALPHA
  | "_"
  | '\u{80}'..'\u{D7FF}'
  | '\u{E000}'..'\u{10FFFF}'
}

// XXX: names can contain hyphens
name_char = _{ name_first | "-" | ASCII_DIGIT }

descendant_segment = {
    ".." ~ (bracketed_selection | wildcard_selector | member_name_shorthand)
}
