{
  "description": "Liquid2 compliance test suite",
  "tests": [
    {
      "name": "output, string literal",
      "template": "{{ 'a' }}",
      "data": {},
      "result": "a"
    },
    {
      "name": "output, integer literal",
      "template": "{{ 1 }}",
      "data": {},
      "result": "1"
    },
    {
      "name": "output, integer literal, negative",
      "template": "{{ -1 }}",
      "data": {},
      "result": "-1"
    },
    {
      "name": "output, float literal",
      "template": "{{ 1.1 }}",
      "data": {},
      "result": "1.1"
    },
    {
      "name": "output, float literal, negative",
      "template": "{{ -1.1 }}",
      "data": {},
      "result": "-1.1"
    },
    {
      "name": "output, integer literal, exponent",
      "template": "{{ 1e2 }}",
      "data": {},
      "result": "100"
    },
    {
      "name": "output, float literal, negative exponent",
      "template": "{{ 1e-2 }}",
      "data": {},
      "result": "0.01"
    },
    {
      "name": "output, float literal, positive exponent",
      "template": "{{ 1e+2 }}",
      "data": {},
      "result": "100"
    },
    {
      "name": "output, null",
      "template": "{{ null }}",
      "data": {},
      "result": ""
    },
    {
      "name": "output, range",
      "template": "{{ (1..3) }}",
      "data": {},
      "result": "1..3"
    },
    {
      "name": "output, query, global",
      "template": "{{ a }}",
      "data": {
        "a": "b"
      },
      "result": "b"
    },
    {
      "name": "output, query, local",
      "template": "{% assign a = 'b' %}{{ a }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "output, query, dotted",
      "template": "{{ a.b }}",
      "data": {
        "a": {
          "b": "c"
        }
      },
      "result": "c"
    },
    {
      "name": "output, query, array index",
      "template": "{{ a.b[0] }}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "1"
    },
    {
      "name": "output, query, negative array index",
      "template": "{{ a.b[-1] }}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "3"
    },
    {
      "name": "output, query, array index from variable",
      "template": "{% assign x = 1 %}{{ a.b[x] }}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "2"
    },
    {
      "name": "output, query, names from variables",
      "template": "{{ site.data.menu[include.menu][include.locale] }}",
      "data": {
        "site": {
          "data": {
            "menu": {
              "foo": {
                "bar": "it works!"
              }
            }
          }
        },
        "include": {
          "menu": "foo",
          "locale": "bar"
        }
      },
      "result": "it works!"
    },
    {
      "name": "output, filter",
      "template": "{{ 'hello' | upcase }}",
      "data": {},
      "result": "HELLO"
    },
    {
      "name": "output, string literal, end output delimiter",
      "template": "{{ '}}' }}",
      "data": {},
      "result": "}}"
    },
    {
      "name": "output, string literal, start output delimiter",
      "template": "{{ '{{' }}",
      "data": {},
      "result": "{{"
    },
    {
      "name": "output, string literal, end tag delimiter",
      "template": "{{ '%}' }}",
      "data": {},
      "result": "%}"
    },
    {
      "name": "output, string literal, start tag delimiter",
      "template": "{{ '{%' }}",
      "data": {},
      "result": "{%"
    },
    {
      "name": "output, string literal, end comment delimiter",
      "template": "{{ '#}' }}",
      "data": {},
      "result": "#}"
    },
    {
      "name": "output, string literal, start tag delimiter",
      "template": "{{ '{#' }}",
      "data": {},
      "result": "{#"
    },
    {
      "name": "output, string literal, escaped single quote in single quoted",
      "template": "{{ '\\'' }}",
      "data": {},
      "result": "'"
    },
    {
      "name": "output, string literal, escaped double quote in double quoted",
      "template": "{{ \"\\\"\" }}",
      "data": {},
      "result": "\""
    },
    {
      "name": "output, query, bracket notation",
      "template": "{{ a['b c'] }}",
      "data": {
        "a": {
          "b c": "d"
        }
      },
      "result": "d"
    },
    {
      "name": "output, query, bracket notation, root",
      "template": "{{ ['a b c'] }}",
      "data": {
        "a b c": "d"
      },
      "result": "d"
    },
    {
      "name": "output, query, singular query selector",
      "template": "{{ a[a.b.c] }}",
      "data": {
        "a": {
          "b": {
            "c": "d"
          },
          "d": "x"
        }
      },
      "result": "x"
    },
    {
      "name": "output, ternary expression, truthy",
      "template": "{{ 'b' if true else 'c' }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "output, ternary expression, falsy",
      "template": "{{ 'b' if false else 'c' }}",
      "data": {},
      "result": "c"
    },
    {
      "name": "output, ternary expression, truthy filter",
      "template": "{{ 'b' | upcase if true else 'c' }}",
      "data": {},
      "result": "B"
    },
    {
      "name": "output, ternary expression, falsy filter",
      "template": "{{ 'b' if false else 'c' | upcase }}",
      "data": {},
      "result": "C"
    },
    {
      "name": "output, ternary expression, truthy, falsy filter",
      "template": "{{ 'b' if true else 'c' | upcase }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "output, ternary expression, falsy, truthy filter",
      "template": "{{ 'b' | upcase if false else 'c' }}",
      "data": {},
      "result": "c"
    },
    {
      "name": "output, ternary expression, tail filter",
      "template": "{{ 'b' if true else 'c' || upcase }}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, echo, string literal",
      "template": "{% echo 'a' %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, echo, integer literal",
      "template": "{% echo 1 %}",
      "data": {},
      "result": "1"
    },
    {
      "name": "tags, echo, integer literal, negative",
      "template": "{% echo -1 %}",
      "data": {},
      "result": "-1"
    },
    {
      "name": "tags, echo, float literal",
      "template": "{% echo 1.1 %}",
      "data": {},
      "result": "1.1"
    },
    {
      "name": "tags, echo, float literal, negative",
      "template": "{% echo -1.1 %}",
      "data": {},
      "result": "-1.1"
    },
    {
      "name": "tags, echo, integer literal, exponent",
      "template": "{% echo 1e2 %}",
      "data": {},
      "result": "100"
    },
    {
      "name": "tags, echo, float literal, negative exponent",
      "template": "{% echo 1e-2 %}",
      "data": {},
      "result": "0.01"
    },
    {
      "name": "tags, echo, float literal, positive exponent",
      "template": "{% echo 1e+2 %}",
      "data": {},
      "result": "100"
    },
    {
      "name": "tags, echo, null",
      "template": "{% echo null %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, echo, range",
      "template": "{% echo (1..3) %}",
      "data": {},
      "result": "1..3"
    },
    {
      "name": "tags, echo, query, global",
      "template": "{% echo a %}",
      "data": {
        "a": "b"
      },
      "result": "b"
    },
    {
      "name": "tags, echo, query, local",
      "template": "{% assign a = 'b' %}{% echo a %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, echo, query, dotted",
      "template": "{% echo a.b %}",
      "data": {
        "a": {
          "b": "c"
        }
      },
      "result": "c"
    },
    {
      "name": "tags, echo, query, array index",
      "template": "{% echo a.b[0] %}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "1"
    },
    {
      "name": "tags, echo, query, negative array index",
      "template": "{% echo a.b[-1] %}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "3"
    },
    {
      "name": "tags, echo, query, array index from variable",
      "template": "{% assign x = 1 %}{% echo a.b[x] %}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "2"
    },
    {
      "name": "tags, echo, query, names from variables",
      "template": "{% echo site.data.menu[include.menu][include.locale] %}",
      "data": {
        "site": {
          "data": {
            "menu": {
              "foo": {
                "bar": "it works!"
              }
            }
          }
        },
        "include": {
          "menu": "foo",
          "locale": "bar"
        }
      },
      "result": "it works!"
    },
    {
      "name": "tags, echo, filter",
      "template": "{% echo 'hello' | upcase %}",
      "data": {},
      "result": "HELLO"
    },
    {
      "name": "tags, echo, string literal, end output delimiter",
      "template": "{% echo '}}' %}",
      "data": {},
      "result": "}}"
    },
    {
      "name": "tags, echo, string literal, start output delimiter",
      "template": "{% echo '{{' %}",
      "data": {},
      "result": "{{"
    },
    {
      "name": "tags, echo, string literal, end tag delimiter",
      "template": "{% echo '%}' %}",
      "data": {},
      "result": "%}"
    },
    {
      "name": "tags, echo, string literal, start tag delimiter",
      "template": "{% echo '{%' %}",
      "data": {},
      "result": "{%"
    },
    {
      "name": "tags, echo, string literal, end comment delimiter",
      "template": "{% echo '#}' %}",
      "data": {},
      "result": "#}"
    },
    {
      "name": "tags, echo, string literal, start tag delimiter",
      "template": "{% echo '{#' %}",
      "data": {},
      "result": "{#"
    },
    {
      "name": "tags, echo, string literal, escaped single quote in single quoted",
      "template": "{% echo '\\'' %}",
      "data": {},
      "result": "'"
    },
    {
      "name": "tags, echo, string literal, escaped double quote in double quoted",
      "template": "{% echo \"\\\"\" %}",
      "data": {},
      "result": "\""
    },
    {
      "name": "tags, echo, query, bracket notation",
      "template": "{% echo a['b c'] %}",
      "data": {
        "a": {
          "b c": "d"
        }
      },
      "result": "d"
    },
    {
      "name": "tags, echo, query, bracket notation, root",
      "template": "{% echo ['a b c'] %}",
      "data": {
        "a b c": "d"
      },
      "result": "d"
    },
    {
      "name": "tags, echo, query, singular query selector",
      "template": "{% echo a[a.b.c] %}",
      "data": {
        "a": {
          "b": {
            "c": "d"
          },
          "d": "x"
        }
      },
      "result": "x"
    },
    {
      "name": "tags, echo, ternary expression, truthy",
      "template": "{% echo 'b' if true else 'c' %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, echo, ternary expression, falsy",
      "template": "{% echo 'b' if false else 'c' %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, echo, ternary expression, truthy filter",
      "template": "{% echo 'b' | upcase if true else 'c' %}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, echo, ternary expression, falsy filter",
      "template": "{% echo 'b' if false else 'c' | upcase %}",
      "data": {},
      "result": "C"
    },
    {
      "name": "tags, echo, ternary expression, truthy, falsy filter",
      "template": "{% echo 'b' if true else 'c' | upcase %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, echo, ternary expression, falsy, truthy filter",
      "template": "{% echo 'b' | upcase if false else 'c' %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, echo, ternary expression, tail filter",
      "template": "{% echo 'b' if true else 'c' || upcase %}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, include, string literal",
      "template": "{% include 'a' %}",
      "data": {
        "b": "c"
      },
      "templates": {
        "a": "{{ b }}"
      },
      "result": "c"
    },
    {
      "name": "tags, include, query",
      "template": "{% include a %}",
      "data": {
        "a": "b",
        "c": "d"
      },
      "templates": {
        "b": "{{ c }}"
      },
      "result": "d"
    },
    {
      "name": "tags, include, bind variable",
      "template": "{% include 'a' with b.c[1] %}",
      "data": {
        "b": {
          "c": [
            1,
            {
              "foo": "bar"
            },
            3
          ]
        }
      },
      "templates": {
        "a": "{{ a.foo }}"
      },
      "result": "bar"
    },
    {
      "name": "tags, include, bind variable with alias",
      "template": "{% include 'a' with b.c[1] as x %}",
      "data": {
        "b": {
          "c": [
            1,
            {
              "foo": "bar"
            },
            3
          ]
        }
      },
      "templates": {
        "a": "{{ x.foo }}"
      },
      "result": "bar"
    },
    {
      "name": "tags, include, bind array, for",
      "template": "{% include 'a' for b.c %}",
      "data": {
        "b": {
          "c": [
            {
              "foo": "bar"
            },
            {
              "foo": "baz"
            }
          ]
        }
      },
      "templates": {
        "a": "{{ a.foo }}"
      },
      "result": "barbaz"
    },
    {
      "name": "tags, include, bind array, with",
      "template": "{% include 'a' with b.c %}",
      "data": {
        "b": {
          "c": [
            {
              "foo": "bar"
            },
            {
              "foo": "baz"
            }
          ]
        }
      },
      "templates": {
        "a": "{{ a.foo }}"
      },
      "result": "barbaz"
    },
    {
      "name": "tags, include, keyword arguments, commas",
      "template": "{% include 'a', b: 'c', d: 'e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, include, keyword arguments, equals",
      "template": "{% include 'a', b='c', d='e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, include, keyword arguments, no leading comma",
      "template": "{% include 'a' b: 'c', d: 'e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, include, shares scope with parents",
      "template": "{% include 'a' %}{{ x }}",
      "data": {},
      "templates": {
        "a": "{% assign x = 42 %}"
      },
      "result": "42"
    },
    {
      "name": "tags, include, break loop in parent template",
      "template": "{% for a in b %}{% include 'a' %}{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "templates": {
        "a": "{{ a }}{% break %}"
      },
      "result": "1"
    },
    {
      "name": "tags, include, keyword arguments go out of scope",
      "template": "{% include 'a' b:'c' %}{{ b }}",
      "data": {},
      "templates": {
        "a": "{{ b }}"
      },
      "result": "c"
    },
    {
      "name": "tags, include, assign to keyword argument",
      "template": "{% include 'a' b:'c' %}{{ b }}",
      "data": {},
      "templates": {
        "a": "{{ b }}{% assign b = 'x' %}{{ b }}"
      },
      "result": "ccx"
    },
    {
      "name": "tags, include, render",
      "template": "{% include 'a' %}",
      "data": {},
      "templates": {
        "a": "{% render 'b' %}",
        "b": "c"
      },
      "result": "c"
    },
    {
      "name": "tags, increment, named counter",
      "template": "{% increment a %} {% increment a %}",
      "data": {},
      "result": "0 1"
    },
    {
      "name": "tags, increment, multiple",
      "template": "{% increment a %} {% increment b %} {% increment a %} {% increment b %}",
      "data": {},
      "result": "0 0 1 1"
    },
    {
      "name": "tags, increment, output",
      "template": "{% increment a %} {% increment a %} {{ a }}",
      "data": {},
      "result": "0 1 2"
    },
    {
      "name": "tags, increment, global name already exists",
      "template": "{{ a }} {% increment a %} {% increment a %} {{a}}",
      "data": {
        "a": 10
      },
      "result": "10 0 1 10"
    },
    {
      "name": "tags, increment, local name already exists",
      "template": "{% assign a = 10 %}{{ a }} {% increment a %} {% increment a %} {{a}}",
      "data": {},
      "result": "10 0 1 10"
    },
    {
      "name": "tags, increment, and decrement",
      "template": "{% increment a %} {% increment a %} {% decrement a %} {% decrement a %} {% increment a %}",
      "data": {},
      "result": "0 1 1 0 0"
    },
    {
      "name": "tags, for, range literal",
      "template": "{% for a in (1..3) %}{{ a }},{% endfor %}",
      "data": {},
      "result": "1,2,3,"
    },
    {
      "name": "tags, for, array",
      "template": "{% for a in b %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1,2,3,"
    },
    {
      "name": "tags, for, hash or dict or map",
      "template": "{% for a in b %}{{ a[0] }} {{ a[1] }},{% endfor %}",
      "data": {
        "b": {
          "x": 1,
          "y": 2,
          "z": 3
        }
      },
      "result": "x 1,y 2,z 3,"
    },
    {
      "name": "tags, for, empty array",
      "template": "{% for a in b %}{{ a }},{% endfor %}",
      "data": {
        "b": []
      },
      "result": ""
    },
    {
      "name": "tags, for, empty array with default",
      "template": "{% for a in b %}{{ a }},{% else %}c{% endfor %}",
      "data": {
        "b": []
      },
      "result": "c"
    },
    {
      "name": "tags, for, string",
      "template": "{% for a in '123' %}{{ a }},{% endfor %}",
      "data": {},
      "result": "1,2,3,"
    },
    {
      "name": "tags, for, break",
      "template": "{% for a in b %}{{ a }},{% if a == 2 %}{% break %}{% endif %}{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1,2,"
    },
    {
      "name": "tags, for, continue",
      "template": "{% for a in b %}{% if a == 2 %}{% continue %}{% endif %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1,3,"
    },
    {
      "name": "tags, for, array, limit, colon",
      "template": "{% for a in b limit:3 %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "1,2,3,"
    },
    {
      "name": "tags, for, array, limit, equals",
      "template": "{% for a in b limit=3 %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "1,2,3,"
    },
    {
      "name": "tags, for, array, offset, colon",
      "template": "{% for a in b offset:2 %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "3,4,5,"
    },
    {
      "name": "tags, for, array, offset, equals",
      "template": "{% for a in b offset=2 %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "3,4,5,"
    },
    {
      "name": "tags, for, array, reversed",
      "template": "{% for a in b reversed %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "3,2,1,"
    },
    {
      "name": "tags, for, comma separated arguments",
      "template": "{% for a in b offset:1, limit:3, reversed %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "4,3,2,"
    },
    {
      "name": "tags, for, space separated arguments",
      "template": "{% for a in b offset:1 limit:3 reversed %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "4,3,2,"
    },
    {
      "name": "tags, for, reversed is first",
      "template": "{% for a in b reversed offset:1, limit:3 %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "4,3,2,"
    },
    {
      "name": "tags, for, length",
      "template": "{% for a in b %}{{ a }} {{ forloop.length }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 3,2 3,3 3,"
    },
    {
      "name": "tags, for, length, limit",
      "template": "{% for a in b limit:3 %}{{ a }} {{ forloop.length }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "1 3,2 3,3 3,"
    },
    {
      "name": "tags, for, length, offset",
      "template": "{% for a in b offset:2 %}{{ a }} {{ forloop.length }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "3 3,4 3,5 3,"
    },
    {
      "name": "tags, for, first",
      "template": "{% for a in b %}{{ a }} {{ forloop.first }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 true,2 false,3 false,"
    },
    {
      "name": "tags, for, first, offset",
      "template": "{% for a in b offset:1 %}{{ a }} {{ forloop.first }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "2 true,3 false,"
    },
    {
      "name": "tags, for, last",
      "template": "{% for a in b %}{{ a }} {{ forloop.last }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 false,2 false,3 true,"
    },
    {
      "name": "tags, for, last, limit",
      "template": "{% for a in b limit:2 %}{{ a }} {{ forloop.last }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 false,2 true,"
    },
    {
      "name": "tags, for, index",
      "template": "{% for a in b %}{{ a }} {{ forloop.index }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 1,2 2,3 3,"
    },
    {
      "name": "tags, for, index0",
      "template": "{% for a in b %}{{ a }} {{ forloop.index0 }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 0,2 1,3 2,"
    },
    {
      "name": "tags, for, rindex",
      "template": "{% for a in b %}{{ a }} {{ forloop.rindex }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 3,2 2,3 1,"
    },
    {
      "name": "tags, for, rindex0",
      "template": "{% for a in b %}{{ a }} {{ forloop.rindex0 }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 2,2 1,3 0,"
    },
    {
      "name": "tags, for, name",
      "template": "{% for a in b limit:1 %}{{ forloop.name }}{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "a-b"
    },
    {
      "name": "tags, for, name, range",
      "template": "{% for a in (1..3) limit:1 %}{{ forloop.name }}{% endfor %}",
      "data": {},
      "result": "a-(1..3)"
    },
    {
      "name": "tags, for, forloop goes out of scope",
      "template": "{% for a in b %}{{ a }} {{ forloop.length }},{% endfor %}{{ forloop.length }}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 3,2 3,3 3,"
    },
    {
      "name": "tags, for, iterate nested path",
      "template": "{% for link in linklists[section.settings.menu].links %}{{ link }} {% endfor %}",
      "data": {
        "linklists": {
          "main": {
            "links": [
              "1",
              "2"
            ]
          }
        },
        "section": {
          "settings": {
            "menu": "main"
          }
        }
      },
      "result": "1 2 "
    },
    {
      "name": "tags, for, offset, continue",
      "template": "{% for a in b limit:3 %}a{{ a }} {% endfor %}{% for a in b offset:continue %}b{{ a }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 a3 b4 b5 b6 "
    },
    {
      "name": "tags, for, offset, continue, range",
      "template": "{% for a in (1..6) limit:3 %}a{{ a }} {% endfor %}{% for a in (1..6) offset:continue %}b{{ a }} {% endfor %}",
      "data": {},
      "result": "a1 a2 a3 b4 b5 b6 "
    },
    {
      "name": "tags, for, offset, continue, assigned range",
      "template": "{% assign b = (1..6) %}{% for a in b limit:3 %}a{{ a }} {% endfor %}{% for a in b offset:continue %}b{{ a }} {% endfor %}",
      "data": {},
      "result": "a1 a2 a3 b4 b5 b6 "
    },
    {
      "name": "tags, for, offset, continue, reassigned array",
      "template": "{% assign b = '1,2,3,4,5,6' | split: ',' %}{% for a in b limit:3 %}{{ a }} {% endfor %}{% assign b = 'u,v,w,x,y,z' | split: ',' %}{% for a in b offset:continue %}{{ a }} {% endfor %}",
      "data": {},
      "result": "1 2 3 x y z "
    },
    {
      "name": "tags, for, offset, continue, different loop variable",
      "template": "{% for a in b limit:3 %}a{{ a }} {% endfor %}{% for x in b offset:continue %}b{{ x }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 a3 b1 b2 b3 b4 b5 b6 "
    },
    {
      "name": "tags, for, offset, continue, nothing to continue from",
      "template": "{% for a in b %}a{{ a }} {% endfor %}{% for a in b offset:continue %}b{{ a }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 a3 a4 a5 a6 "
    },
    {
      "name": "tags, for, offset, continue, no preceding loop",
      "template": "{% for a in b offset:continue %}{{ a }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "1 2 3 4 5 6 "
    },
    {
      "name": "tags, for, offset, continue, twice",
      "template": "{% for a in b limit:2 %}a{{ a }} {% endfor %}{% for a in b offset:continue limit: 2 %}b{{ a }} {% endfor %}{% for a in b offset:continue %}c{{ a }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 b3 b4 c5 c6 "
    },
    {
      "name": "tags, for, offset, continue, broken",
      "template": "{% for a in b limit:4 %}{% if a == 3 %}{% break %}{% endif %}a{{ a }} {% endfor %}{% for a in b offset:continue limit: 2 %}b{{ a }} {% endfor %}{% for a in b offset:continue %}c{{ a }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 b5 b6 "
    },
    {
      "name": "tags, for, offset, continue, forloop length",
      "template": "{% for a in b limit: 2 %}a{{ a }}-{{ forloop.length }} {% endfor %}{% for a in b offset:continue %}b{{ a }}-{{ forloop.length }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1-2 a2-2 b3-4 b4-4 b5-4 b6-4 "
    },
    {
      "name": "tags, decrement, named counter",
      "template": "{% decrement a %} {% decrement a %}",
      "data": {},
      "result": "-1 -2"
    },
    {
      "name": "tags, decrement, multiple",
      "template": "{% decrement a %} {% decrement b %} {% decrement a %} {% decrement b %}",
      "data": {},
      "result": "-1 -1 -2 -2"
    },
    {
      "name": "tags, decrement, output",
      "template": "{% decrement a %} {% decrement a %} {{ a }}",
      "data": {},
      "result": "-1 -2 -2"
    },
    {
      "name": "tags, decrement, global name already exists",
      "template": "{{ a }} {% decrement a %} {% decrement a %} {{a}}",
      "data": {
        "a": 10
      },
      "result": "10 -1 -2 10"
    },
    {
      "name": "tags, decrement, local name already exists",
      "template": "{% assign a = 10 %}{{ a }} {% decrement a %} {% decrement a %} {{a}}",
      "data": {},
      "result": "10 -1 -2 10"
    },
    {
      "name": "tags, decrement, and increment",
      "template": "{% decrement a %} {% decrement a %} {% increment a %} {% increment a %} {% decrement a %}",
      "data": {},
      "result": "-1 -2 -2 -1 -1"
    },
    {
      "name": "tags, case, query, first when",
      "template": "{% case a %}{% when 'b' %}c{% when 'd' %}e{% endcase %}",
      "data": {
        "a": "b"
      },
      "result": "c"
    },
    {
      "name": "tags, case, query, last when",
      "template": "{% case a %}{% when 'b' %}c{% when 'd' %}e{% endcase %}",
      "data": {
        "a": "d"
      },
      "result": "e"
    },
    {
      "name": "tags, case, query, both whens",
      "template": "{% case a %}{% when 'b' %}c{% when 'b' %}d{% endcase %}",
      "data": {
        "a": "b"
      },
      "result": "cd"
    },
    {
      "name": "tags, case, query, no match",
      "template": "{% case a %}{% when 'b' %}c{% when 'd' %}e{% endcase %}",
      "data": {
        "a": "x"
      },
      "result": ""
    },
    {
      "name": "tags, case, string literal",
      "template": "{% case 'a' %}{% when 'a' %}b{% when 'c' %}d{% endcase %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, case, or",
      "template": "{% case 'b' %}{% when 'a' or 'b' %}c{% when 'd' %}e{% endcase %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, case, comma separated or",
      "template": "{% case 'b' %}{% when 'a', 'b' %}c{% when 'd' %}e{% endcase %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, case, or, multiple",
      "template": "{% case 'b' %}{% when 'a' or 'b' or 'x' %}c{% when 'd' %}e{% endcase %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, case, multiple comma separated or",
      "template": "{% case 'b' %}{% when 'a', 'b', 'x' %}c{% when 'd' %}e{% endcase %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, case, mixed comma and or separated",
      "template": "{% case 'b' %}{% when 'a' or 'b', 'x' %}c{% when 'd' %}e{% endcase %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, case, default",
      "template": "{% case 'a' %}{% when 'b' %}c{% when 'd' %}e{% else %}f{% endcase %}",
      "data": {},
      "result": "f"
    },
    {
      "name": "tags, case, default, not rendered",
      "template": "{% case 'a' %}{% when 'b' %}c{% when 'a' %}e{% else %}f{% endcase %}",
      "data": {},
      "result": "e"
    },
    {
      "name": "tags, case, default, no whens",
      "template": "{% case 'a' %}{% else %}f{% endcase %}",
      "data": {},
      "result": "f"
    },
    {
      "name": "tags, case, no whens or default",
      "template": "{% case 'a' %}{% endcase %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, case, whitespace after case",
      "template": "{% case 'a' %}\n  {% when 'a' %}b{% endcase %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, case, content after case",
      "template": "{% case 'a' %}hello{% when 'b' %}c{% endcase %}",
      "invalid": true
    },
    {
      "name": "tags, case, missing when expression",
      "template": "{% case 'a' %}{% when %}b{% endcase %}",
      "invalid": true
    },
    {
      "name": "tags, case, switch on array",
      "template": "{% case a %}{% when b %}c{% endcase %}",
      "data": {
        "a": [
          1,
          2,
          3
        ],
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "c"
    },
    {
      "name": "tags, case, multiple else blocks",
      "template": "{% case a %}{% when b %}c{% else %}d{% else %}{% endcase %}",
      "invalid": true
    },
    {
      "name": "tags, case, when after else",
      "template": "{% case a %}{% when b %}c{% else %}d{% when 'e' %}f{% endcase %}",
      "invalid": true
    },
    {
      "name": "tags, render, string literal",
      "template": "{% render 'a' %}",
      "data": {
        "b": "c"
      },
      "templates": {
        "a": "{{ b }}"
      },
      "result": "c"
    },
    {
      "name": "tags, render, query",
      "template": "{% render a %}",
      "invalid": true
    },
    {
      "name": "tags, render, bind variable",
      "template": "{% render 'a' with b.c[1] %}",
      "data": {
        "b": {
          "c": [
            1,
            {
              "foo": "bar"
            },
            3
          ]
        }
      },
      "templates": {
        "a": "{{ a.foo }}"
      },
      "result": "bar"
    },
    {
      "name": "tags, render, bind variable with alias",
      "template": "{% render 'a' with b.c[1] as x %}",
      "data": {
        "b": {
          "c": [
            1,
            {
              "foo": "bar"
            },
            3
          ]
        }
      },
      "templates": {
        "a": "{{ x.foo }}"
      },
      "result": "bar"
    },
    {
      "name": "tags, render, bind array, for",
      "template": "{% render 'a' for b.c %}",
      "data": {
        "b": {
          "c": [
            {
              "foo": "bar"
            },
            {
              "foo": "baz"
            }
          ]
        }
      },
      "templates": {
        "a": "{{ a.foo }}"
      },
      "result": "barbaz"
    },
    {
      "name": "tags, render, bind array, with",
      "template": "{% render 'a' with b.c %}",
      "data": {
        "b": {
          "c": [
            {
              "foo": "bar"
            },
            {
              "foo": "baz"
            }
          ]
        }
      },
      "templates": {
        "a": "{{ a[0].foo }}"
      },
      "result": "bar"
    },
    {
      "name": "tags, render, keyword arguments, commas",
      "template": "{% render 'a', b: 'c', d: 'e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, render, keyword arguments, equals",
      "template": "{% render 'a', b='c', d='e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, render, keyword arguments, no leading comma",
      "template": "{% render 'a' b: 'c', d: 'e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, render, keyword arguments, range literal",
      "template": "{% render 'a' b: (1..3) %}",
      "data": {},
      "templates": {
        "a": "{{ b | join: '#' }}"
      },
      "result": "1#2#3"
    },
    {
      "name": "tags, render, new scope",
      "template": "{% assign x = 'y' %}{% render 'a' %}{{ x }}",
      "data": {},
      "templates": {
        "a": "{{ x }}!"
      },
      "result": "!y"
    },
    {
      "name": "tags, render, keyword arguments go out of scope",
      "template": "{% render 'a' b:'c' %}{{ b }}",
      "data": {},
      "templates": {
        "a": "{{ b }}"
      },
      "result": "c"
    },
    {
      "name": "tags, render, forloop drop",
      "template": "{% render 'a' for b %}",
      "data": {
        "b": [
          1,
          2
        ]
      },
      "templates": {
        "a": "{{ a }} {{ forloop.first }} {{ forloop.last }} {{ forloop.index0 }}, "
      },
      "result": "1 true false 0, 2 false true 1, "
    },
    {
      "name": "tags, render, forloop drop, no parentloop",
      "template": "{% for x in (1..2) %}{% render 'a' for b %}{% endfor %}",
      "data": {
        "b": [
          1,
          2
        ]
      },
      "templates": {
        "a": "{{ a }} {{ forloop.parentloop.index0 }}, "
      },
      "result": "1 , 2 , 1 , 2 , "
    },
    {
      "name": "tags, render, include",
      "template": "{% render 'a' %}",
      "templates": {
        "a": "{% include 'b' %}",
        "b": "c"
      },
      "invalid": true
    },
    {
      "name": "tags, assign, string literal",
      "template": "{% assign a = 'b' %}{{ a }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, assign, integer literal",
      "template": "{% assign a = 123 %}{{ a }}",
      "data": {},
      "result": "123"
    },
    {
      "name": "tags, assign, float literal",
      "template": "{% assign a = 1.23 %}{{ a }}",
      "data": {},
      "result": "1.23"
    },
    {
      "name": "tags, assign, range literal",
      "template": "{% assign a = (1..3) %}{{ a | join: '#' }}",
      "data": {},
      "result": "1#2#3"
    },
    {
      "name": "tags, assign, simple query",
      "template": "{% assign a = b %}{{ a }}",
      "data": {
        "b": "c"
      },
      "result": "c"
    },
    {
      "name": "tags, assign, query, nested object",
      "template": "{% assign a = b.c %}{{ a }}",
      "data": {
        "b": {
          "c": "d"
        }
      },
      "result": "d"
    },
    {
      "name": "tags, assign, query, nested array element",
      "template": "{% assign a = b.c[1] %}{{ a }}",
      "data": {
        "b": {
          "c": [
            1,
            2,
            3
          ]
        }
      },
      "result": "2"
    },
    {
      "name": "tags, assign, string literal containing an end tag delimiter",
      "template": "{% assign a = 'foo%}bar' %}{{ a }}",
      "data": {},
      "result": "foo%}bar"
    },
    {
      "name": "tags, assign, string literal containing a start output delimiter",
      "template": "{% assign a = 'foo{{bar' %}{{ a }}",
      "data": {},
      "result": "foo{{bar"
    },
    {
      "name": "tags, assign, shadow global variable",
      "template": "{{ a }}{% assign a = 'c' %}{{ a }}",
      "data": {
        "a": "b"
      },
      "result": "bc"
    },
    {
      "name": "tags, assign, string literal, filtered",
      "template": "{% assign a = 'b' | upcase %}{{ a }}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, assign, ternary expression, truthy",
      "template": "{% assign a = 'b' if true else 'c' %}{{ a }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, assign, ternary expression, falsy",
      "template": "{% assign a = 'b' if false else 'c' %}{{ a }}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, assign, ternary expression, truthy filter",
      "template": "{% assign a = 'b' | upcase if true else 'c' %}{{ a }}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, assign, ternary expression, falsy filter",
      "template": "{% assign a = 'b' if false else 'c' | upcase %}{{ a }}",
      "data": {},
      "result": "C"
    },
    {
      "name": "tags, assign, ternary expression, truthy, falsy filter",
      "template": "{% assign a = 'b' if true else 'c' | upcase %}{{ a }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, assign, ternary expression, falsy, truthy filter",
      "template": "{% assign a = 'b' | upcase if false else 'c' %}{{ a }}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, assign, ternary expression, tail filter",
      "template": "{% assign a = 'b' if true else 'c' || upcase %}{{ a }}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, assign, missing assignment operator",
      "template": "{% assign a 'b' %}",
      "invalid": true
    },
    {
      "name": "tags, assign, missing expression",
      "template": "{% assign a = %}",
      "invalid": true
    },
    {
      "name": "tags, unless, literal true, no alternative",
      "template": "{% unless true %}a{% endunless %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, unless, literal false",
      "template": "{% unless false %}a{% endunless %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, unless, literal true, alternative",
      "template": "{% unless true %}a{% else %}b{% endunless %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, unless, literal true, truthy alternative",
      "template": "{% unless true %}a{% elsif true %}b{% endunless %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, unless, literal true, falsy alternative",
      "template": "{% unless true %}a{% elsif false %}b{% endunless %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, unless, literal true, falsy alternative, final alternative",
      "template": "{% unless true %}a{% elsif false %}b{% else %}c{% endunless %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, unless, missing whitespace after tag name",
      "template": "{% unlesstrue %}a{% endunless %}",
      "invalid": true
    },
    {
      "name": "tags, unless, no whitespace before tag name",
      "template": "{%unless false %}a{% endunless %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, unless, no whitespace after expression",
      "template": "{% unless false%}a{% endunless %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, unless, extra else block",
      "template": "{% unless true %}a{% else %}b{% else %}c{% endunless %}",
      "invalid": true
    },
    {
      "name": "tags, unless, extra elsif block",
      "template": "{% unless true %}a{% else %}b{% elsif true %}c{% endunless %}",
      "invalid": true
    },
    {
      "name": "tags, if, literal true",
      "template": "{% if true %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, literal false, no alternative",
      "template": "{% if false %}a{% endif %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, if, literal false, alternative",
      "template": "{% if false %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, literal false, truthy alternative",
      "template": "{% if false %}a{% elsif true %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, literal false, falsy alternative",
      "template": "{% if false %}a{% elsif false %}b{% endif %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, if, literal false, falsy alternative, final alternative",
      "template": "{% if false %}a{% elsif false %}b{% else %}c{% endif %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, if, equality, truthy, strings",
      "template": "{% if a == 'b' %}c{% endif %}",
      "data": {
        "a": "b"
      },
      "result": "c"
    },
    {
      "name": "tags, if, equality, falsy, strings",
      "template": "{% if a == 'x' %}c{% endif %}",
      "data": {
        "a": "b"
      },
      "result": ""
    },
    {
      "name": "tags, if, equality, truthy, integers",
      "template": "{% if a == 1 %}b{% endif %}",
      "data": {
        "a": 1
      },
      "result": "b"
    },
    {
      "name": "tags, if, equality, falsy, integers",
      "template": "{% if a == 1 %}b{% endif %}",
      "data": {
        "a": 2
      },
      "result": ""
    },
    {
      "name": "tags, if, equality, truthy, floats",
      "template": "{% if a == 1.1 %}b{% endif %}",
      "data": {
        "a": 1.1
      },
      "result": "b"
    },
    {
      "name": "tags, if, equality, falsy, floats",
      "template": "{% if a == 1.2 %}b{% endif %}",
      "data": {
        "a": 1.0
      },
      "result": ""
    },
    {
      "name": "tags, if, equality, truthy, float and integer",
      "template": "{% if a == 1 %}b{% endif %}",
      "data": {
        "a": 1.0
      },
      "result": "b"
    },
    {
      "name": "tags, if, equality, falsy, float and integer",
      "template": "{% if a == 1 %}b{% endif %}",
      "data": {
        "a": 1.1
      },
      "result": ""
    },
    {
      "name": "tags, if, less than, truthy, integers",
      "template": "{% if a < 10 %}b{% endif %}",
      "data": {
        "a": 5
      },
      "result": "b"
    },
    {
      "name": "tags, if, less than, falsy, integers",
      "template": "{% if a < 10 %}b{% endif %}",
      "data": {
        "a": 20
      },
      "result": ""
    },
    {
      "name": "tags, if, less than, truthy, floats",
      "template": "{% if a < 10.1 %}b{% endif %}",
      "data": {
        "a": 5.1
      },
      "result": "b"
    },
    {
      "name": "tags, if, less than, falsy, floats",
      "template": "{% if a < 10.1 %}b{% endif %}",
      "data": {
        "a": 20.1
      },
      "result": ""
    },
    {
      "name": "tags, if, less than, truthy, strings",
      "template": "{% if 'abc' < 'acb' %}x{% endif %}",
      "data": {},
      "result": "x"
    },
    {
      "name": "tags, if, less than, falsy, strings",
      "template": "{% if 'bbb' < 'aaa' %}x{% else %}y{% endif %}",
      "data": {},
      "result": "y"
    },
    {
      "name": "tags, if, non-empty hash or dict or map is truthy",
      "template": "{% if a %}d{% endif %}",
      "data": {
        "a": {
          "b": "c"
        }
      },
      "result": "d"
    },
    {
      "name": "tags, if, literal null is falsy",
      "template": "{% if null %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, literal nil is falsy",
      "template": "{% if nil %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, undefined variables are falsy",
      "template": "{% if nosuchthing %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, undefined variables are equal to null",
      "template": "{% if nosuchthing == null %}a{% else %}b{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, nested, truthy",
      "template": "{% if true %}a{% if true %}b{% endif %}{% else %}c{% endif %}",
      "data": {},
      "result": "ab"
    },
    {
      "name": "tags, if, nested, falsy",
      "template": "{% if true %}a{% if false %}b{% endif %}{% else %}c{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, contains, truthy, array of integers",
      "template": "{% if a contains 1 %}b{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "b"
    },
    {
      "name": "tags, if, contains, falsy, array of integers",
      "template": "{% if a contains 5 %}b{% else %}c{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "c"
    },
    {
      "name": "tags, if, in, truthy, array of integers",
      "template": "{% if 1 in a %}b{% else %}c{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "b"
    },
    {
      "name": "tags, if, in, falsy, array of integers",
      "template": "{% if 5 in a %}b{% else %}c{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "c"
    },
    {
      "name": "tags, if, contains, truthy, strings",
      "template": "{% if 'foobar' contains 'oob' %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, contains, falsy, strings",
      "template": "{% if 'foobar' contains 'baz' %}b{% else %}c{% endif %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, if, contains, string and integer",
      "template": "{% if 'foo2bar' contains 2 %}a{% else %}b{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, in, truthy, strings",
      "template": "{% if 'oob' in 'foobar' %}b{% else %}c{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, in, falsy, strings",
      "template": "{% if 'baz' in 'foobar' %}b{% else %}c{% endif %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, if, contains, truthy, hash or dict or map",
      "template": "{% if a contains 'b' %}c{% endif %}",
      "data": {
        "a": {
          "b": false
        }
      },
      "result": "c"
    },
    {
      "name": "tags, if, contains, falsy, hash or dict or map",
      "template": "{% if a contains 'b' %}c{% else %}d{% endif %}",
      "data": {
        "a": {
          "e": true
        }
      },
      "result": "d"
    },
    {
      "name": "tags, if, in, truthy, hash or dict or map",
      "template": "{% if 'a' in b %}c{% else %}d{% endif %}",
      "data": {
        "b": {
          "a": false
        }
      },
      "result": "c"
    },
    {
      "name": "tags, if, in, falsy, hash or dict or map",
      "template": "{% if 'a' in b %}c{% else %}d{% endif %}",
      "data": {
        "b": {
          "e": true
        }
      },
      "result": "d"
    },
    {
      "name": "tags, if, not equal, truthy, strings",
      "template": "{% if a != 'b' %}c{% endif %}",
      "data": {
        "a": "d"
      },
      "result": "c"
    },
    {
      "name": "tags, if, not equal, falsy, strings",
      "template": "{% if a != 'x' %}c{% else %}d{% endif %}",
      "data": {
        "a": "x"
      },
      "result": "d"
    },
    {
      "name": "tags, if, not equal, alternative operator",
      "template": "{% if a <> 'b' %}c{% endif %}",
      "data": {
        "a": "d"
      },
      "result": "c"
    },
    {
      "name": "tags, if, empty string is truthy",
      "template": "{% if '' %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, empty array is truthy",
      "template": "{% if a %}b{% endif %}",
      "data": {
        "a": []
      },
      "result": "b"
    },
    {
      "name": "tags, if, empty array is equal to special empty",
      "template": "{% if a == empty %}b{% endif %}",
      "data": {
        "a": []
      },
      "result": "b"
    },
    {
      "name": "tags, if, empty hash or dict or map is equal to special empty",
      "template": "{% if a == empty %}b{% endif %}",
      "data": {
        "a": {}
      },
      "result": "b"
    },
    {
      "name": "tags, if, empty string is equal to special empty",
      "template": "{% if a == empty %}b{% endif %}",
      "data": {
        "a": ""
      },
      "result": "b"
    },
    {
      "name": "tags, if, empty string is equal to special blank",
      "template": "{% if a == blank %}b{% endif %}",
      "data": {
        "a": ""
      },
      "result": "b"
    },
    {
      "name": "tags, if, whitespace only string is equal to special blank",
      "template": "{% if '  ' == blank %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, equality, range literal",
      "template": "{% assign a = (1..3) %}{% if a == (1..3) %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, equality, arrays",
      "template": "{% assign a = 'a,b,c' | split: ',' %}{% if a == b %}c{% endif %}",
      "data": {
        "b": [
          "a",
          "b",
          "c"
        ]
      },
      "result": "c"
    },
    {
      "name": "tags, if, equality, string and integer",
      "template": "{% if 1 == '1' %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, greater than, string and integer",
      "template": "{% if 2 > '1' %}a{% else %}b{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, logical not, false literal",
      "template": "{% if not false %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, logical not, true literal",
      "template": "{% if not true %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, logical and binds more tightly than or",
      "template": "{% if true and false and false or true %}a{% else %}b{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, group terms with parentheses",
      "template": "{% if (true and (false and (false or true))) %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, unbalanced parentheses",
      "template": "{% if true and (false and true %}a{% else %}b{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, more unbalanced parentheses",
      "template": "{% if (true and (false and (false or true)) %}a{% else %}b{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, zero is not equal to false",
      "template": "{% if 0 == false %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, zero is truthy",
      "template": "{% if 0 %}a{% else %}b{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, float zero is truthy",
      "template": "{% if 0.0 %}a{% else %}b{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, missing whitespace after tag name",
      "template": "{% iftrue %}a{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, no whitespace before tag name",
      "template": "{%if true %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, no whitespace after expression",
      "template": "{% if true%}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, extra else block",
      "template": "{% if false %}a{% else %}b{% else %}c{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, extra elsif block",
      "template": "{% if false %}a{% else %}b{% elsif true %}c{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, cycle, string literals",
      "template": "{% cycle 'a', 'b' %}{% cycle 'a', 'b' %}{% cycle 'a', 'b' %}",
      "data": {},
      "result": "aba"
    },
    {
      "name": "tags, cycle, integer literals",
      "template": "{% cycle 1, 2 %}{% cycle 1, 2 %}{% cycle 1, 2 %}",
      "data": {},
      "result": "121"
    },
    {
      "name": "tags, cycle, bool literals",
      "template": "{% cycle true, false %}{% cycle true, false %}{% cycle true, false %}",
      "data": {},
      "result": "truefalsetrue"
    },
    {
      "name": "tags, cycle, queries",
      "template": "{% cycle a, b %}{% cycle a, b %}{% cycle a, b %}",
      "data": {
        "a": "c",
        "b": "d"
      },
      "result": "cdc"
    },
    {
      "name": "tags, cycle, differing items",
      "template": "{% cycle 'a', 'b' %}{% cycle 'a', 'b', 'c' %}{% cycle 'a', 'b' %}",
      "data": {},
      "result": "aab"
    },
    {
      "name": "tags, cycle, named",
      "template": "{% cycle foo: 'a', 'b' %}{% cycle foo: 'a', 'b' %}{% cycle foo: 'a', 'b' %}",
      "data": {},
      "result": "aba"
    },
    {
      "name": "tags, cycle, named, differing items",
      "template": "{% cycle foo: 'a', 'b' %}{% cycle foo: 'a', 'b', 'c' %}{% cycle foo: 'a', 'b' %}",
      "data": {},
      "result": "aab"
    },
    {
      "name": "tags, cycle, differing names, same items",
      "template": "{% cycle foo: 'a', 'b' %}{% cycle bar: 'a', 'b' %}{% cycle foo: 'a', 'b' %}",
      "data": {},
      "result": "aab"
    },
    {
      "name": "tags, cycle, name is a path",
      "template": "{% cycle foo.bar: 'a', 'b' %}",
      "invalid": true
    },
    {
      "name": "tags, cycle, no items",
      "template": "{% cycle %}",
      "invalid": true
    },
    {
      "name": "tags, cycle, name, no items",
      "template": "{% cycle foo: %}",
      "invalid": true
    },
    {
      "name": "tags, liquid, string literal, single line",
      "template": "{% liquid echo 'a' %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, liquid, string literals, multiple lines",
      "template": "{% liquid echo 'a'\nassign b = 'c'\necho b %}",
      "data": {},
      "result": "ac"
    },
    {
      "name": "tags, liquid, multiple lines, leading newline",
      "template": "{% liquid echo 'a'\nassign b = 'c'\necho b %}",
      "data": {},
      "result": "ac"
    },
    {
      "name": "tags, liquid, carriage return and newline terminated statements",
      "template": "{% liquid echo 'a'\r\nassign b = 'c'\r\necho b %}",
      "data": {},
      "result": "ac"
    },
    {
      "name": "tags, liquid, carriage return terminated statements",
      "template": "{% liquid echo 'a'\rassign b = 'c'\recho b %}",
      "invalid": true
    },
    {
      "name": "tags, liquid, empty",
      "template": "{% liquid %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, liquid, only whitespace",
      "template": "{% liquid\n   \n\n   \t \n\t\n  %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, liquid, comment",
      "template": "{% liquid # some comment %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, liquid, comment, leading newline",
      "template": "{% liquid\n# some comment %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, liquid, comments",
      "template": "{% liquid\n# some comment\n# other comment %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, liquid, comments and tags",
      "template": "{% liquid\n# some comment\necho 'a'\n# other comment %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, liquid, comment does not consume whitespace control",
      "template": "{% liquid\n# some comment -%}\n\na",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, liquid, block",
      "template": "{% if true %}{% liquid echo 'a' %}{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, liquid, can't close outer block",
      "template": "{% if true %}{% liquid endif' %}",
      "invalid": true
    },
    {
      "name": "tags, liquid, liquid in liquid",
      "template": "{% liquid liquid echo 'a' %}",
      "invalid": true
    },
    {
      "name": "tags, liquid, empty line",
      "template": "{% liquid\necho 'a'\n\n\necho 'b' %}",
      "data": {},
      "result": "ab"
    },
    {
      "name": "tags, liquid, blank line",
      "template": "{% liquid\necho 'a'\n \t\n\necho 'b' %}",
      "data": {},
      "result": "ab"
    },
    {
      "name": "tags, capture, content with global variables",
      "template": "{% capture a %}Hello, {{ b }}!{% endcapture %}{{ a }}",
      "data": {
        "b": "you"
      },
      "result": "Hello, you!"
    },
    {
      "name": "tags, capture, into identifier containing a hyphen",
      "template": "{% capture a-b %}Hello, {{ c }}!{% endcapture %}{{ a-b }}",
      "data": {
        "c": "you"
      },
      "result": "Hello, you!"
    },
    {
      "name": "tags, capture, empty block",
      "template": "{% capture a %}{% endcapture %}{{ a }}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, capture, empty block, end of input",
      "template": "{% capture a %}{% endcapture %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, capture, extra tokens",
      "template": "{% capture a b %}{% endcapture %}",
      "invalid": true
    },
    {
      "name": "tags, extends, no blocks",
      "template": "{% extends 'a' %} this should not be rendered",
      "data": {
        "you": "world"
      },
      "templates": {
        "a": "Hello, {{ you }}!"
      },
      "result": "Hello, world!"
    },
    {
      "name": "tags, extends, no parent block",
      "template": "{% extends 'a' %}{% block b %}this should not be rendered{% endblock %}",
      "data": {
        "you": "world"
      },
      "templates": {
        "a": "Hello, {{ you }}!"
      },
      "result": "Hello, world!"
    },
    {
      "name": "tags, extends, no child block",
      "template": "{% extends 'a' %} this should not be rendered",
      "data": {
        "you": "world"
      },
      "templates": {
        "a": "Hello, {% block b %}{{ you }}!{% endblock %}"
      },
      "result": "Hello, world!"
    },
    {
      "name": "tags, extends, override parent block",
      "template": "{% extends 'a' %}{% block b %}sue{% endblock %}",
      "data": {
        "you": "world"
      },
      "templates": {
        "a": "Hello, {% block b %}{{ you }}{% endblock %}!"
      },
      "result": "Hello, sue!"
    },
    {
      "name": "tags, extends, render base template directly",
      "template": "Hello, {% block b %}{{ you }}{% endblock %}!",
      "data": {
        "you": "world"
      },
      "result": "Hello, world!"
    },
    {
      "name": "tags, extends, output super block",
      "template": "{% extends a %}{% block b %}{{ block.super }} and sue{% endblock %}",
      "data": {
        "you": "world"
      },
      "templates": {
        "a": "Hello, {% block b %}{{ you }}{% endblock %}!"
      },
      "result": "Hello, world and sue!"
    },
    {
      "name": "tags, extends, scoped",
      "template": "{% extends a %}{% block b %}{{ greeting }}, {{ you }}!{% endblock %}",
      "data": {},
      "templates": {
        "a": "{% assign greeting = 'Hello' %}{% block b %}{% endblock %}{% assign you = 'world' %}"
      },
      "result": "Hello, !"
    },
    {
      "name": "tags, extends, block scope",
      "template": "{% extends a %}{% block b %}{{ greeting }}, {{ x }}! {% endblock %}",
      "data": {},
      "templates": {
        "a": "{% assign greeting = 'Hello' %}{% for x in (1..2) %}{% block b %}{% endblock %}{% endfor %}"
      },
      "result": "Hello, 1! Hello, 2! "
    },
    {
      "name": "tags, extends, multiple",
      "template": "{% extends a %}{% block b %}Hello, {{ you }}!{% endblock %}",
      "data": {},
      "templates": {
        "a": "{% extends c %}",
        "c": "{% assign you = 'world' %}{% block b %}{% endblock %}"
      },
      "result": "Hello, world!"
    },
    {
      "name": "tags, extends, nested block scoped parent variables are in scope",
      "template": "{% extends 'some' %}{% block baz %}Hello, {{ you }} {{ other }} {{ i }}:{{ x }} {% endblock %}",
      "result": "Hello, world banana 1:1 Hello, world banana 1:2 Hello, world banana 2:1 Hello, world banana 2:2 ",
      "data": {},
      "templates": {
        "base": "{% assign you = 'world' %}{% for i in (1..2) %}{% block bar %}hello, {{ you }}!{% endblock %}{% endfor %}",
        "some": "{% extends 'base' %}{% block bar %}{% assign other = 'banana' %}{% for x in (1..2) %}{% block baz %}{% endblock baz %}{% endfor %}{% endblock bar %}"
      }
    },
    {
      "name": "tags, extends, child variables are out of scope",
      "template": "{% extends 'foo' %}{% block bar %}{% assign something = '/other' %}goodbye, {{ you }}{% assign you = 'sue' %}{% endblock %}",
      "result": "goodbye, world",
      "data": {},
      "templates": {
        "foo": "{% assign you = 'world' %}{% block bar %}{% endblock %}{{ something }}"
      }
    },
    {
      "name": "tags, extends, nested outer block",
      "template": "{% extends 'foo' %}{% block bar %}Goodbye{% endblock %}",
      "result": "Goodbye!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}!"
      }
    },
    {
      "name": "tags, extends, override nested block",
      "template": "{% extends 'foo' %}{% block greeting %}Goodbye{% endblock %}",
      "result": "Goodbye, world!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}"
      }
    },
    {
      "name": "tags, extends, super nested blocks",
      "template": "{% extends 'foo' %}{% block bar %}{{ block.super }}!!{% endblock %}",
      "result": "Hello, world!!!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}"
      }
    },
    {
      "name": "tags, extends, override a parent's parent block",
      "template": "{% extends 'bar' %}{% block greeting %}Goodbye,{% endblock %}",
      "result": "Goodbye, world",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block greeting %}Hello{% endblock %} {{ you }}",
        "bar": "{% extends 'foo' %}"
      }
    },
    {
      "name": "tags, extends, multi-level super",
      "template": "{% extends 'baz' %}{% block bar %}{{ block.super }}!!{% endblock %}",
      "result": "Hello, world!**!!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}",
        "baz": "{% extends 'foo' %}{% block bar %}{{ block.super }}**{% endblock %}"
      }
    },
    {
      "name": "tags, extends, include an extended template",
      "template": "{% include 'bar' %}",
      "result": "foo bar",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}",
        "bar": "{% extends 'foo' %}{% block bar %}foo bar{% endblock %}"
      }
    },
    {
      "name": "tags, extends, include in an overridden block",
      "template": "{% extends 'foo' %}{% block greeting %}{% include 'bar' %}{% endblock %}",
      "result": "I am included, world!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}",
        "bar": "I am included"
      }
    },
    {
      "name": "tags, extends, render an extended template",
      "template": "{% render 'bar' %}",
      "result": "foo bar",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}",
        "bar": "{% extends 'foo' %}{% block bar %}foo bar{% endblock %}"
      }
    },
    {
      "name": "tags, extends, render in an overridden block",
      "template": "{% extends 'foo' %}{% block greeting %}{% render 'bar' %}{% endblock %}",
      "result": "I am rendered, world!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}",
        "bar": "I am rendered"
      }
    },
    {
      "name": "filters, concat, range literal concat filter left value",
      "template": "{{ (1..3) | concat: foo | join: '#' }}",
      "data": {
        "foo": [
          5,
          6,
          7
        ]
      },
      "result": "1#2#3#5#6#7"
    },
    {
      "name": "filters, concat, two arrays of strings",
      "template": "{{ a | concat: b | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b"
        ],
        "b": [
          "c",
          "d"
        ]
      },
      "result": "a#b#c#d"
    },
    {
      "name": "filters, concat, missing argument is an error",
      "template": "{{ a | concat | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, concat, non array-like argument is an error",
      "template": "{{ a | concat: b | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b"
        ],
        "b": 5
      },
      "invalid": true
    },
    {
      "name": "filters, concat, left value is not array-like",
      "template": "{{ a | concat: b | join: '#' }}",
      "data": {
        "a": "ab",
        "b": [
          "c",
          "d"
        ]
      },
      "result": "ab#c#d"
    },
    {
      "name": "filters, concat, left value contains non string",
      "template": "{{ a | concat: b | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b",
          5
        ],
        "b": [
          "c",
          "d"
        ]
      },
      "result": "a#b#5#c#d"
    },
    {
      "name": "filters, concat, undefined left value",
      "template": "{{ nosuchthing | concat: b | join: '#' }}",
      "data": {
        "b": [
          "c",
          "d"
        ]
      },
      "result": "c#d"
    },
    {
      "name": "filters, concat, undefined argument is an error",
      "template": "{{ a | concat: nosuchthing | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, concat, nested left value gets flattened",
      "template": "{{ a | concat: b | join: '#' }}",
      "data": {
        "a": [
          [
            "a",
            "x"
          ],
          [
            "b",
            [
              "y",
              [
                "z"
              ]
            ]
          ]
        ],
        "b": [
          "c",
          "d"
        ]
      },
      "result": "a#x#b#y#z#c#d"
    },
    {
      "name": "filters, capitalize, lower case string",
      "template": "{{ \"hello\" | capitalize }}",
      "data": {},
      "result": "Hello"
    },
    {
      "name": "filters, capitalize, already capitalized string",
      "template": "{{ \"Hello\" | capitalize }}",
      "data": {},
      "result": "Hello"
    },
    {
      "name": "filters, capitalize, unexpected argument",
      "template": "{{ \"hello\" | capitalize: 2 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, capitalize, undefined left value",
      "template": "{{ nosuchthing | capitalize }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, sort, array of strings",
      "template": "{{ a | sort | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a",
          "C",
          "B",
          "A"
        ]
      },
      "result": "A#B#C#a#b"
    },
    {
      "name": "filters, sort, array of objects",
      "template": "{% assign x = a | sort: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "Baz"
          },
          {
            "title": "bar"
          }
        ]
      },
      "result": "(title,Baz)(title,bar)(title,foo)"
    },
    {
      "name": "filters, sort, array of objects with missing key",
      "template": "{% assign x = a | sort: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "heading": "Baz"
          },
          {
            "title": "bar"
          }
        ]
      },
      "result": "(title,bar)(title,foo)(heading,Baz)"
    },
    {
      "name": "filters, sort, empty array",
      "template": "{{ a | sort | join: '#' }}",
      "data": {
        "a": []
      },
      "result": ""
    },
    {
      "name": "filters, sort, too many arguments",
      "template": "{{ a | sort: 'title', 'foo' | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, sort, left value is not an array",
      "template": "{{ a | sort | join: '#' }}",
      "data": {
        "a": 123
      },
      "result": "123"
    },
    {
      "name": "filters, sort, left value is undefined",
      "template": "{{ nosuchthing | sort | join: '#' }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, sort, argument is undefined",
      "template": "{{ a | sort: nosuchthing | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a"
        ]
      },
      "result": "a#b"
    },
    {
      "name": "filters, sort, sort a string",
      "template": "{{ 'BzAa4' | sort | join: '#' }}",
      "data": {},
      "result": "BzAa4"
    },
    {
      "name": "filters, sort, array of integers",
      "template": "{{ a | sort | join: '#' }}",
      "data": {
        "a": [
          1,
          1000,
          3,
          30
        ]
      },
      "result": "1#3#30#1000"
    },
    {
      "name": "filters, sort, incompatible types",
      "template": "{{ a | sort }}",
      "data": {
        "a": [
          [],
          {},
          1,
          "4"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, upcase, make lower case",
      "template": "{{ \"hello\" | upcase }}",
      "data": {},
      "result": "HELLO"
    },
    {
      "name": "filters, upcase, not a string",
      "template": "{{ 5 | upcase }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, upcase, unexpected argument",
      "template": "{{ \"hello\" | upcase: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, upcase, undefined left value",
      "template": "{{ nosuchthing | upcase }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, uniq, array of strings",
      "template": "{{ a | uniq | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b",
          "b",
          "a"
        ]
      },
      "result": "a#b"
    },
    {
      "name": "filters, uniq, array of things",
      "template": "{{ a | uniq | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b",
          1,
          1
        ]
      },
      "result": "a#b#1"
    },
    {
      "name": "filters, uniq, empty array",
      "template": "{{ a | uniq | join: '#' }}",
      "data": {
        "a": []
      },
      "result": ""
    },
    {
      "name": "filters, uniq, unhashable items",
      "template": "{{ a | uniq | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b",
          [],
          {},
          {}
        ]
      },
      "result": "a#b#{}"
    },
    {
      "name": "filters, uniq, left value is not an array",
      "template": "{{ a | uniq | join: '#' }}",
      "data": {
        "a": 123
      },
      "result": "123"
    },
    {
      "name": "filters, uniq, left value is undefined",
      "template": "{{ nosuchthing | uniq | join: '#' }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, uniq, too many arguments",
      "template": "{{ nosuchthing | uniq: 'foo', 'bar' }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, uniq, array of objects with key property",
      "template": "{% assign x = a | uniq: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo",
            "name": "a"
          },
          {
            "title": "foo",
            "name": "b"
          },
          {
            "title": "bar",
            "name": "c"
          }
        ]
      },
      "result": "(title,foo)(name,a)(title,bar)(name,c)"
    },
    {
      "name": "filters, uniq, array of objects with missing key property",
      "template": "{% assign x = a | uniq: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo",
            "name": "a"
          },
          {
            "title": "foo",
            "name": "b"
          },
          {
            "title": "bar",
            "name": "c"
          },
          {
            "heading": "bar",
            "name": "c"
          },
          {
            "heading": "baz",
            "name": "d"
          }
        ]
      },
      "result": "(title,foo)(name,a)(title,bar)(name,c)(heading,bar)(name,c)"
    },
    {
      "name": "filters, rstrip, left padded",
      "template": "{{ \" \t\r\n  hello\" | rstrip }}",
      "data": {},
      "result": " \t\r\n  hello"
    },
    {
      "name": "filters, rstrip, right padded",
      "template": "{{ \"hello \t\r\n  \" | rstrip }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, rstrip, left and right padded",
      "template": "{{ \" \t\r\n  hello  \t\r\n \" | rstrip }}",
      "data": {},
      "result": " \t\r\n  hello"
    },
    {
      "name": "filters, rstrip, not a string",
      "template": "{{ 5 | rstrip }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, rstrip, unexpected argument",
      "template": "{{ \"hello\" | rstrip: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, rstrip, undefined left value",
      "template": "{{ nosuchthing | rstrip }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, downcase, make lower case",
      "template": "{{ \"HELLO\" | downcase }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, downcase, not a string",
      "template": "{{ 5 | downcase }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, downcase, unexpected argument",
      "template": "{{ \"HELLO\" | downcase: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, downcase, undefined left value",
      "template": "{{ nosuchthing | downcase }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, remove, remove substrings",
      "template": "{{ \"I strained to see the train through the rain\" | remove: \"rain\" }}",
      "data": {},
      "result": "I sted to see the t through the "
    },
    {
      "name": "filters, remove, not a string",
      "template": "{{ 5 | remove: 'there' }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, remove, argument not a string",
      "template": "{{ \"hello\" | remove: 5 }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, remove, missing argument",
      "template": "{{ \"hello\" | remove }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, remove, too many arguments",
      "template": "{{ \"hello\" | remove: \"how\", \"are\", \"you\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, remove, undefined left value",
      "template": "{{ nosuchthing | remove: \"rain\" }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, remove, undefined argument",
      "template": "{{ \"hello\" | remove: nosuchthing }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, split, split string",
      "template": "{{ \"Hi, how are you today?\" | split: \" \" | join: \"#\" }}",
      "data": {},
      "result": "Hi,#how#are#you#today?"
    },
    {
      "name": "filters, split, not a string",
      "template": "{{ 56 | split: ' ' | first }}",
      "data": {},
      "result": "56"
    },
    {
      "name": "filters, split, argument not a string",
      "template": "{{ \"hello th1ere\" | split: 1 | join: \"#\" }}",
      "data": {},
      "result": "hello th#ere"
    },
    {
      "name": "filters, split, missing argument",
      "template": "{{ \"hello there\" | split }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, split, too many arguments",
      "template": "{{ \"hello there\" | split: \" \", \",\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, split, undefined left value",
      "template": "{{ nosuchthing | split: \" \" }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, split, undefined argument",
      "template": "{{ \"Hello there\" | split: nosuchthing | join: \"#\" }}",
      "data": {},
      "result": "H#e#l#l#o# #t#h#e#r#e"
    },
    {
      "name": "filters, split, empty string argument",
      "template": "{% assign a = \"abc\" | split: \"\" %}{% for i in a %}#{{ forloop.index0 }}{{ i }}{% endfor %}",
      "data": {},
      "result": "#0a#1b#2c"
    },
    {
      "name": "filters, split, argument does not appear in string",
      "template": "{% assign a = \"abc\" | split: \",\" %}{% for i in a %}#{{ forloop.index0 }}{{ i }}{% endfor %}",
      "data": {},
      "result": "#0abc"
    },
    {
      "name": "filters, split, empty string and empty argument",
      "template": "{% assign a = \"\" | split: \"\" %}{% for i in a %}{{ forloop.index0 }}{{ i }}{% endfor %}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, split, empty string and single char argument",
      "template": "{% assign a = \"\" | split: \",\" %}{% for i in a %}{{ forloop.index0 }}{{ i }}{% endfor %}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, split, left matches argument",
      "template": "{% assign a = \",\" | split: \",\" %}{% for i in a %}{{ forloop.index0 }}{{ i }}{% endfor %}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, split, left matches string repr of argument",
      "template": "{% assign a = \"1\" | split: 1 %}{% for i in a %}{{ forloop.index0 }}{{ i }}{% endfor %}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, replace, replace substrings",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace: \"my\", \"your\" }}",
      "data": {},
      "result": "Take your protein pills and put your helmet on"
    },
    {
      "name": "filters, replace, not a string",
      "template": "{{ 5 | replace: 'rain', 'foo' }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, replace, left value is an object",
      "template": "{{ a | replace: '{', '!' }}",
      "data": {
        "a": {}
      },
      "result": "!}"
    },
    {
      "name": "filters, replace, argument not a string",
      "template": "{{ \"hello\" | replace: 5, \"your\" }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, replace, missing argument",
      "template": "{{ \"hello\" | replace: \"ll\" }}",
      "data": {},
      "result": "heo"
    },
    {
      "name": "filters, replace, missing arguments",
      "template": "{{ \"hello\" | replace }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, replace, too many arguments",
      "template": "{{ \"hello\" | replace: \"how\", \"are\", \"you\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, replace, undefined left value",
      "template": "{{ nosuchthing | replace: \"my\", \"your\" }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, replace, undefined first argument",
      "template": "{{ \"Take my protein\" | replace: nosuchthing, \"#\" }}",
      "data": {},
      "result": "#T#a#k#e# #m#y# #p#r#o#t#e#i#n#"
    },
    {
      "name": "filters, replace, undefined second argument",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace: \"my\", nosuchthing }}",
      "data": {},
      "result": "Take  protein pills and put  helmet on"
    },
    {
      "name": "filters, modulo, integer value and integer arg",
      "template": "{{ 10 | modulo: 2 }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, modulo, integer value and float arg",
      "template": "{{ 10 | modulo: 2.0 }}",
      "data": {},
      "result": "0.0"
    },
    {
      "name": "filters, modulo, float value and float arg",
      "template": "{{ 10.1 | modulo: 7.0 }}",
      "data": {},
      "result": "3.1"
    },
    {
      "name": "filters, modulo, string value and argument",
      "template": "{{ \"10\" | modulo: \"2.0\" }}",
      "data": {},
      "result": "0.0"
    },
    {
      "name": "filters, modulo, string not a number",
      "template": "{{ \"foo\" | modulo: \"2.0\" }}",
      "data": {},
      "result": "0.0"
    },
    {
      "name": "filters, modulo, arg string not a number",
      "template": "{{ \"10\" | modulo: \"foo\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, modulo, too many args",
      "template": "{{ 5 | modulo: 1, '5' }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, modulo, not a string, int or float",
      "template": "{{ a | modulo: 1 }}",
      "data": {
        "a": {}
      },
      "result": "0"
    },
    {
      "name": "filters, modulo, undefined left value",
      "template": "{{ nosuchthing | modulo: 2 }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, modulo, undefined argument",
      "template": "{{ 5 | modulo: nosuchthing }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, default, nil",
      "template": "{{ nil | default: 'foo' }}",
      "data": {},
      "result": "foo"
    },
    {
      "name": "filters, default, false",
      "template": "{{ False | default: 'foo' }}",
      "data": {},
      "result": "foo"
    },
    {
      "name": "filters, default, empty string",
      "template": "{{ \"\" | default: \"foo\" }}",
      "data": {},
      "result": "foo"
    },
    {
      "name": "filters, default, empty array",
      "template": "{{ a | default: 'foo' }}",
      "data": {
        "a": []
      },
      "result": "foo"
    },
    {
      "name": "filters, default, empty object",
      "template": "{{ a | default: 'foo' }}",
      "data": {
        "a": {}
      },
      "result": "foo"
    },
    {
      "name": "filters, default, not empty string",
      "template": "{{ \"hello\" | default: \"foo\" }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, default, not empty list",
      "template": "{{ a | default: \"foo\" | join: \"#\" }}",
      "data": {
        "a": [
          "hello",
          "world"
        ]
      },
      "result": "hello#world"
    },
    {
      "name": "filters, default, not empty object",
      "template": "{% assign b = a | default: foo %}{% for item in b %}({{ item[0] }},{{ item[1] }}){% endfor %}",
      "data": {
        "a": {
          "greeting": "hello"
        },
        "foo": {
          "greeting": "goodbye"
        }
      },
      "result": "(greeting,hello)"
    },
    {
      "name": "filters, default, too many arguments",
      "template": "{{ None | default: 'foo', 'bar', 'baz' }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, default, missing argument",
      "template": "{{ false | default }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, default, empty",
      "template": "{{ empty | default: bar }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, default, allow false",
      "template": "{{ false | default: 'bar', allow_false:true }}",
      "data": {},
      "result": "false"
    },
    {
      "name": "filters, default, allow false from context",
      "template": "{{ false | default: 'bar', allow_false:foo }}",
      "data": {
        "foo": true
      },
      "result": "false"
    },
    {
      "name": "filters, default, undefined left value",
      "template": "{{ nosuchthing | default: \"bar\" }}",
      "data": {},
      "result": "bar"
    },
    {
      "name": "filters, default, true keyword argument before positional",
      "template": "{{ false | default: allow_false: true, \"bar\" }}",
      "data": {},
      "result": "false"
    },
    {
      "name": "filters, default, false keyword argument before positional",
      "template": "{{ false | default: allow_false: false, \"bar\" }}",
      "data": {},
      "result": "bar"
    },
    {
      "name": "filters, default, zero is not falsy",
      "template": "{{ 0 | default: \"bar\" }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, default, zero is not falsy with allow_false",
      "template": "{{ 0 | default: \"bar\", allow_false: true }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, default, 0.0 is not falsy",
      "template": "{{ 0.0 | default: \"bar\" }}",
      "data": {},
      "result": "0.0"
    },
    {
      "name": "filters, sort natural, array of strings",
      "template": "{{ a | sort_natural | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a",
          "C",
          "B",
          "A"
        ]
      },
      "result": "a#A#b#B#C"
    },
    {
      "name": "filters, sort natural, array of strings with a nul",
      "template": "{% assign x = a | sort_natural %}{% for i in x %}{{ i }}{% unless forloop.last %}#{% endunless %}{% endfor %}",
      "data": {
        "a": [
          "b",
          "a",
          null,
          "C",
          "B",
          "A"
        ]
      },
      "result": "a#A#b#B#C#"
    },
    {
      "name": "filters, sort natural, array of objects with a key",
      "template": "{% assign x = a | sort_natural: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": "Baz"
          }
        ]
      },
      "result": "(title,bar)(title,Baz)(title,foo)"
    },
    {
      "name": "filters, sort natural, array of objects with a key gets stringified",
      "template": "{% assign x = a | sort_natural: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": 9
          },
          {
            "title": 1111
          },
          {
            "title": 87
          }
        ]
      },
      "result": "(title,1111)(title,87)(title,9)"
    },
    {
      "name": "filters, sort natural, array of objects with a missing key",
      "template": "{% assign x = a | sort_natural: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "heading": "Baz"
          }
        ]
      },
      "result": "(title,bar)(title,foo)(heading,Baz)"
    },
    {
      "name": "filters, sort natural, argument is undefined",
      "template": "{% assign x = a | sort_natural: nosuchthing %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": "Baz"
          }
        ]
      },
      "result": "(title,bar)(title,Baz)(title,foo)"
    },
    {
      "name": "filters, sort natural, empty array",
      "template": "{% assign x = a | sort_natural %}{% for i in x %}{{ i }}{% unless forloop.last %}#{% endunless %}{% endfor %}",
      "data": {
        "a": []
      },
      "result": ""
    },
    {
      "name": "filters, sort natural, left value is not an array",
      "template": "{{ a | sort_natural }}",
      "data": {
        "a": 123
      },
      "result": "123"
    },
    {
      "name": "filters, sort natural, left value is undefined",
      "template": "{{ nosuchthing | sort_natural }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, sort natural, incompatible types",
      "template": "{{ a | sort_natural }}",
      "data": {
        "a": [
          {},
          1,
          "4"
        ]
      },
      "result": "14{}"
    },
    {
      "name": "filters, prepend, concat",
      "template": "{{ \"hello\" | prepend: \"there\" }}",
      "data": {},
      "result": "therehello"
    },
    {
      "name": "filters, prepend, not a string",
      "template": "{{ 5 | prepend: 'there' }}",
      "data": {},
      "result": "there5"
    },
    {
      "name": "filters, prepend, argument not a string",
      "template": "{{ \"hello\" | prepend: 5 }}",
      "data": {},
      "result": "5hello"
    },
    {
      "name": "filters, prepend, missing argument",
      "template": "{{ \"hello\" | prepend }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, prepend, too many arguments",
      "template": "{{ \"hello\" | prepend: \"how\", \"are\", \"you\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, prepend, undefined left value",
      "template": "{{ nosuchthing | prepend: \"hi\" }}",
      "data": {},
      "result": "hi"
    },
    {
      "name": "filters, prepend, undefined argument",
      "template": "{{ \"hi\" | prepend: nosuchthing }}",
      "data": {},
      "result": "hi"
    },
    {
      "name": "filters, at least, positive integer < arg",
      "template": "{{ 5 | at_least: 8 }}",
      "data": {},
      "result": "8"
    },
    {
      "name": "filters, at least, positive integer > arg",
      "template": "{{ 8 | at_least: 5 }}",
      "data": {},
      "result": "8"
    },
    {
      "name": "filters, at least, negative integer < arg",
      "template": "{{ -8 | at_least: 5 }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, at least, positive integer == arg",
      "template": "{{ 5 | at_least: 5 }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, at least, positive float < arg",
      "template": "{{ 5.4 | at_least: 8.9 }}",
      "data": {},
      "result": "8.9"
    },
    {
      "name": "filters, at least, positive float > arg",
      "template": "{{ 8.4 | at_least: 5.9 }}",
      "data": {},
      "result": "8.4"
    },
    {
      "name": "filters, at least, positive string > arg",
      "template": "{{ \"9\" | at_least: 8 }}",
      "data": {},
      "result": "9"
    },
    {
      "name": "filters, at least, missing arg",
      "template": "{{ 5 | at_least }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, at least, too many args",
      "template": "{{ 5 | at_least: 1, 2}}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, at least, undefined left value",
      "template": "{{ nosuchthing | at_least: 5 }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, at least, undefined argument",
      "template": "{{ 5 | at_least: nosuchthing }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, at least, left value not a number",
      "template": "{{ \"abc\" | at_least: 2 }}",
      "data": {},
      "result": "2"
    },
    {
      "name": "filters, at least, left value not a number negative argument",
      "template": "{{ \"abc\" | at_least: -2 }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, at least, argument string not a number",
      "template": "{{ -1 | at_least: \"abc\" }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, plus, integer value and integer arg",
      "template": "{{ 10 | plus: 2 }}",
      "data": {},
      "result": "12"
    },
    {
      "name": "filters, plus, integer value and float arg",
      "template": "{{ 10 | plus: 2.0 }}",
      "data": {},
      "result": "12.0"
    },
    {
      "name": "filters, plus, float value and float arg",
      "template": "{{ 10.1 | plus: 2.2 }}",
      "data": {},
      "result": "12.3"
    },
    {
      "name": "filters, plus, string value and string arg",
      "template": "{{ \"10.1\" | plus: \"2.2\" }}",
      "data": {},
      "result": "12.3"
    },
    {
      "name": "filters, plus, string not a number",
      "template": "{{ \"foo\" | plus: \"2.0\" }}",
      "data": {},
      "result": "2.0"
    },
    {
      "name": "filters, plus, arg string not a number",
      "template": "{{ \"10\" | plus: \"foo\" }}",
      "data": {},
      "result": "10"
    },
    {
      "name": "filters, plus, too many args",
      "template": "{{ 5 | plus: 1, '5' }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, plus, not a string, int or float",
      "template": "{{ a | plus: 1 }}",
      "data": {
        "a": {}
      },
      "result": "1"
    },
    {
      "name": "filters, plus, undefined left value",
      "template": "{{ nosuchthing | plus: 2 }}",
      "data": {},
      "result": "2"
    },
    {
      "name": "filters, plus, undefined argument",
      "template": "{{ 10 | plus: nosuchthing }}",
      "data": {},
      "result": "10"
    },
    {
      "name": "filters, plus, integer value and negative integer arg",
      "template": "{{ 10 | plus: -2 }}",
      "data": {},
      "result": "8"
    },
    {
      "name": "filters, times, int times int",
      "template": "{{ 5 | times: 2 }}",
      "data": {},
      "result": "10"
    },
    {
      "name": "filters, times, int times float",
      "template": "{{ 5 | times: 2.1 }}",
      "data": {},
      "result": "10.5"
    },
    {
      "name": "filters, times, float times float",
      "template": "{{ 5.0 | times: 2.1 }}",
      "data": {},
      "result": "10.5"
    },
    {
      "name": "filters, times, string times string",
      "template": "{{ \"5.0\" | times: \"2.1\" }}",
      "data": {},
      "result": "10.5"
    },
    {
      "name": "filters, times, negative multiplication",
      "template": "{{ -5 | times: 2 }}",
      "data": {},
      "result": "-10"
    },
    {
      "name": "filters, times, missing arg",
      "template": "{{ 5 | times }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, times, too many args",
      "template": "{{ 5 | times: 1, 2 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, times, undefined left value",
      "template": "{{ nosuchthing | times: 2 }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, times, undefined argument",
      "template": "{{ 5 | times: nosuchthing }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, strip newlines, newline and other whitespace",
      "template": "{{ \"hello there\nyou\" | strip_newlines }}",
      "data": {},
      "result": "hello thereyou"
    },
    {
      "name": "filters, strip newlines, not a string",
      "template": "{{ 5 | strip_newlines }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, strip newlines, unexpected argument",
      "template": "{{ \"hello\" | strip_newlines: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, strip newlines, reference implementation test 1",
      "template": "{{ \"a\nb\nc\" | strip_newlines }}",
      "data": {},
      "result": "abc"
    },
    {
      "name": "filters, strip newlines, reference implementation test 2",
      "template": "{{ \"a\r\nb\nc\" | strip_newlines }}",
      "data": {},
      "result": "abc"
    },
    {
      "name": "filters, strip newlines, undefined left value",
      "template": "{{ nosuchthing | strip_newlines }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, at most, positive integer < arg",
      "template": "{{ 5 | at_most: 8 }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, at most, positive integer > arg",
      "template": "{{ 8 | at_most: 5 }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, at most, negative integer < arg",
      "template": "{{ -8 | at_most: 5 }}",
      "data": {},
      "result": "-8"
    },
    {
      "name": "filters, at most, positive integer == arg",
      "template": "{{ 5 | at_most: 5 }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, at most, positive float < arg",
      "template": "{{ 5.4 | at_most: 8.9 }}",
      "data": {},
      "result": "5.4"
    },
    {
      "name": "filters, at most, positive float > arg",
      "template": "{{ 8.4 | at_most: 5.9 }}",
      "data": {},
      "result": "5.9"
    },
    {
      "name": "filters, at most, positive string > arg",
      "template": "{{ \"9\" | at_most: 8 }}",
      "data": {},
      "result": "8"
    },
    {
      "name": "filters, at most, missing arg",
      "template": "{{ 5 | at_most }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, at most, too many args",
      "template": "{{ 5 | at_most: 1, 2}}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, at most, undefined left value",
      "template": "{{ nosuchthing | at_most: 5 }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, at most, undefined argument",
      "template": "{{ 5 | at_most: nosuchthing }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, at most, left value not a number",
      "template": "{{ \"abc\" | at_most: -2 }}",
      "data": {},
      "result": "-2"
    },
    {
      "name": "filters, replace first, replace substrings",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace_first: \"my\", \"your\" }}",
      "data": {},
      "result": "Take your protein pills and put my helmet on"
    },
    {
      "name": "filters, replace first, not a string",
      "template": "{{ 5 | replace_first: 'rain', 'foo' }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, replace first, argument not a string",
      "template": "{{ \"hello5\" | replace_first: 5, \"your\" }}",
      "data": {},
      "result": "helloyour"
    },
    {
      "name": "filters, replace first, missing argument",
      "template": "{{ \"hello\" | replace_first: \"ll\" }}",
      "data": {},
      "result": "heo"
    },
    {
      "name": "filters, replace first, missing arguments",
      "template": "{{ \"hello\" | replace_first }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, replace first, too many arguments",
      "template": "{{ \"hello\" | replace_first: \"how\", \"are\", \"you\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, replace first, undefined left value",
      "template": "{{ nosuchthing | replace_first: \"my\", \"your\" }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, replace first, undefined first argument",
      "template": "{{ \"Take my protein\" | replace_first: nosuchthing, \"#\" }}",
      "data": {},
      "result": "#Take my protein"
    },
    {
      "name": "filters, replace first, undefined second argument",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace_first: \"my\", nosuchthing }}",
      "data": {},
      "result": "Take  protein pills and put my helmet on"
    },
    {
      "name": "filters, compact, array with a nil",
      "template": "{{ a | compact | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a",
          null,
          "A"
        ]
      },
      "result": "b#a#A"
    },
    {
      "name": "filters, compact, empty array",
      "template": "{{ a | compact | join: '#' }}",
      "data": {
        "a": []
      },
      "result": ""
    },
    {
      "name": "filters, compact, too many arguments",
      "template": "{{ a | compact: 'foo', 'bar' }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, compact, left value is not an array",
      "template": "{{ a | compact | first }}",
      "data": {
        "a": 123
      },
      "result": "123"
    },
    {
      "name": "filters, compact, left value is undefined",
      "template": "{{ nosuchthing | compact }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, compact, array of objects with key property",
      "template": "{% assign x = a | compact: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo",
            "name": "a"
          },
          {
            "title": null,
            "name": "b"
          },
          {
            "title": "bar",
            "name": "c"
          }
        ]
      },
      "result": "(title,foo)(name,a)(title,bar)(name,c)"
    },
    {
      "name": "filters, sum, empty sequence",
      "template": "{{ a | sum }}",
      "data": {
        "a": []
      },
      "result": "0"
    },
    {
      "name": "filters, sum, only zeros",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          0,
          0,
          0
        ]
      },
      "result": "0"
    },
    {
      "name": "filters, sum, ints",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "6"
    },
    {
      "name": "filters, sum, negative ints",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          -1,
          -2,
          -3
        ]
      },
      "result": "-6"
    },
    {
      "name": "filters, sum, negative strings",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          "-1",
          "-2",
          "-3"
        ]
      },
      "result": "-6"
    },
    {
      "name": "filters, sum, positive and negative ints",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          -2,
          -3,
          10
        ]
      },
      "result": "5"
    },
    {
      "name": "filters, sum, nested ints",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          1,
          [
            2,
            [
              3
            ]
          ]
        ]
      },
      "result": "6"
    },
    {
      "name": "filters, sum, hashes with property argument",
      "template": "{{ a | sum: 'k' }}",
      "data": {
        "a": [
          {
            "k": 1
          },
          {
            "k": 2
          },
          {
            "k": 3
          }
        ]
      },
      "result": "6"
    },
    {
      "name": "filters, sum, hashes with numeric strings and property argument",
      "template": "{{ a | sum: 'k' }}",
      "data": {
        "a": [
          {
            "k": "1"
          },
          {
            "k": "2"
          },
          {
            "k": "3"
          }
        ]
      },
      "result": "6"
    },
    {
      "name": "filters, sum, hashes without property argument",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          {
            "k": 1
          },
          {
            "k": 2
          },
          {
            "k": 3
          }
        ]
      },
      "result": "0"
    },
    {
      "name": "filters, sum, hashes with some missing properties",
      "template": "{{ a | sum: 'k' }}",
      "data": {
        "a": [
          {
            "k": 1
          },
          {
            "k": 2
          },
          {
            "x": 3
          }
        ]
      },
      "result": "3"
    },
    {
      "name": "filters, sum, properties arguments with non-hash items",
      "template": "{{ a | sum: 'k' }}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, replace last, replace substrings",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace_last: \"my\", \"your\" }}",
      "data": {},
      "result": "Take my protein pills and put your helmet on"
    },
    {
      "name": "filters, replace last, not a string",
      "template": "{{ 5 | replace_last: 'rain', 'foo' }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, replace last, argument not a string",
      "template": "{{ \"hello5\" | replace_last: 5, \"your\" }}",
      "data": {},
      "result": "helloyour"
    },
    {
      "name": "filters, replace last, missing argument",
      "template": "{{ \"hello\" | replace_last: \"ll\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, replace last, missing arguments",
      "template": "{{ \"hello\" | replace_last }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, replace last, too many arguments",
      "template": "{{ \"hello\" | replace_last: \"how\", \"are\", \"you\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, replace last, undefined left value",
      "template": "{{ nosuchthing | replace_last: \"my\", \"your\" }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, replace last, undefined first argument",
      "template": "{{ \"Take my protein\" | replace_last: nosuchthing, \"#\" }}",
      "data": {},
      "result": "Take my protein#"
    },
    {
      "name": "filters, replace last, undefined second argument",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace_last: \"my\", nosuchthing }}",
      "data": {},
      "result": "Take my protein pills and put  helmet on"
    },
    {
      "name": "filters, abs, positive integer",
      "template": "{{ 5 | abs }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, abs, negative integer",
      "template": "{{ -5 | abs }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, abs, positive float",
      "template": "{{ 5.4 | abs }}",
      "data": {},
      "result": "5.4"
    },
    {
      "name": "filters, abs, negative float",
      "template": "{{ -5.4 | abs }}",
      "data": {},
      "result": "5.4"
    },
    {
      "name": "filters, abs, zero",
      "template": "{{ 0 | abs }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, abs, positive string integer",
      "template": "{{ '5' | abs }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, abs, negative string integer",
      "template": "{{ '-5' | abs }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, abs, positive string float",
      "template": "{{ '5.1' | abs }}",
      "data": {},
      "result": "5.1"
    },
    {
      "name": "filters, abs, negative string float",
      "template": "{{ '-5.1' | abs }}",
      "data": {},
      "result": "5.1"
    },
    {
      "name": "filters, abs, unexpected argument",
      "template": "{{ -3 | abs: 1 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, abs, string not a number",
      "template": "{{ 'hello' | abs }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, abs, not a string, int or float",
      "template": "{{ a | abs }}",
      "data": {
        "a": {}
      },
      "result": "0"
    },
    {
      "name": "filters, abs, undefined left value",
      "template": "{{ nosuchthing | abs }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, strip, left padded",
      "template": "{{ \" \t\r\n  hello\" | strip }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, strip, right padded",
      "template": "{{ \"hello \t\r\n  \" | strip }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, strip, left and right padded",
      "template": "{{ \" \t\r\n  hello  \t\r\n \" | strip }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, strip, not a string",
      "template": "{{ 5 | strip }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, strip, unexpected argument",
      "template": "{{ \"hello\" | strip: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, strip, undefined left value",
      "template": "{{ nosuchthing | strip }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, round, float round down",
      "template": "{{ 5.1 | round }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, round, float round up",
      "template": "{{ 5.6 | round }}",
      "data": {},
      "result": "6"
    },
    {
      "name": "filters, round, float as a string",
      "template": "{{ \"5.6\" | round }}",
      "data": {},
      "result": "6"
    },
    {
      "name": "filters, round, string argument",
      "template": "{{ 5.666 | round: \"1\" }}",
      "data": {},
      "result": "5.7"
    },
    {
      "name": "filters, round, decimal places",
      "template": "{{ \"5.666666\" | round: 2 }}",
      "data": {},
      "result": "5.67"
    },
    {
      "name": "filters, round, integer",
      "template": "{{ 5 | round }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, round, too many args",
      "template": "{{ 5 | round: 1, 2 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, round, undefined left value",
      "template": "{{ nosuchthing | round: 2 }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, round, undefined argument",
      "template": "{{ 5.666 | round: nosuchthing }}",
      "data": {},
      "result": "6"
    },
    {
      "name": "filters, round, argument is a string",
      "template": "{{ 5.666 | round: 'foo' }}",
      "data": {},
      "result": "6"
    },
    {
      "name": "filters, round, argument is a string representation of an integer",
      "template": "{{ 5.666 | round: '1' }}",
      "data": {},
      "result": "5.7"
    },
    {
      "name": "filters, round, argument is a string representation of zero",
      "template": "{{ 5.666 | round: '1' }}",
      "data": {},
      "result": "5.7"
    },
    {
      "name": "filters, round, argument is a negative",
      "template": "{{ 5.666 | round: -2 }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, round, argument is a float",
      "template": "{{ 5.666 | round: 1.2 }}",
      "data": {},
      "result": "5.7"
    },
    {
      "name": "filters, round, argument is a zero",
      "template": "{{ 5.666 | round: 0 }}",
      "data": {},
      "result": "6"
    },
    {
      "name": "filters, size, size of an array",
      "template": "{{ a | size }}",
      "data": {
        "a": [
          "a",
          "b",
          "c"
        ]
      },
      "result": "3"
    },
    {
      "name": "filters, size, size of a string",
      "template": "{{ a | size }}",
      "data": {
        "a": "abc"
      },
      "result": "3"
    },
    {
      "name": "filters, size, size of an empty array",
      "template": "{{ a | size }}",
      "data": {
        "a": []
      },
      "result": "0"
    },
    {
      "name": "filters, size, size of a hash",
      "template": "{{ a | size }}",
      "data": {
        "a": {
          "a": 1,
          "b": 2
        }
      },
      "result": "2"
    },
    {
      "name": "filters, size, unexpected argument",
      "template": "{{ a | size: 'foo' }}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, size, undefined left value",
      "template": "{{ nosuchthing | size }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, remove first, remove substrings",
      "template": "{{ \"I strained to see the train through the rain\" | remove_first: \"rain\" }}",
      "data": {},
      "result": "I sted to see the train through the rain"
    },
    {
      "name": "filters, remove first, not a string",
      "template": "{{ 5 | remove_first: 'rain' }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, remove first, argument not a string",
      "template": "{{ \"hello\" | remove_first: 5 }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, remove first, missing argument",
      "template": "{{ \"hello\" | remove_first }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, remove first, too many arguments",
      "template": "{{ \"hello\" | remove_first: \"how\", \"are\", \"you\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, remove first, undefined left value",
      "template": "{{ nosuchthing | remove_first: \"rain\" }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, remove first, undefined argument",
      "template": "{{ \"hello\" | remove_first: nosuchthing }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, floor, positive integer",
      "template": "{{ 5 | floor }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, floor, negative integer",
      "template": "{{ -5 | floor }}",
      "data": {},
      "result": "-5"
    },
    {
      "name": "filters, floor, positive float",
      "template": "{{ 5.4 | floor }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, floor, negative float",
      "template": "{{ -5.4 | floor }}",
      "data": {},
      "result": "-6"
    },
    {
      "name": "filters, floor, zero",
      "template": "{{ 0 | floor }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, floor, positive string float",
      "template": "{{ \"5.1\" | floor }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, floor, negative string float",
      "template": "{{ \"-5.1\" | floor }}",
      "data": {},
      "result": "-6"
    },
    {
      "name": "filters, floor, unexpected argument",
      "template": "{{ -3.1 | floor: 1 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, floor, string not a number",
      "template": "{{ \"hello\" | floor }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, floor, not a string, int or float",
      "template": "{{ a | floor }}",
      "data": {
        "a": {}
      },
      "result": "0"
    },
    {
      "name": "filters, floor, undefined left value",
      "template": "{{ nosuchthing | floor }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, lstrip, left padded",
      "template": "{{ \" \t\r\n  hello\" | lstrip }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, lstrip, right padded",
      "template": "{{ \"hello \t\r\n  \" | lstrip }}",
      "data": {},
      "result": "hello \t\r\n  "
    },
    {
      "name": "filters, lstrip, left and right padded",
      "template": "{{ \" \t\r\n  hello  \t\r\n \" | lstrip }}",
      "data": {},
      "result": "hello  \t\r\n "
    },
    {
      "name": "filters, lstrip, not a string",
      "template": "{{ 5 | lstrip }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, lstrip, unexpected argument",
      "template": "{{ \"hello\" | lstrip: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, lstrip, undefined left value",
      "template": "{{ nosuchthing | lstrip }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, strip html, some HTML markup",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "Have <em>you</em> read <strong>Ulysses</strong> &amp; &#20;?"
      },
      "result": "Have you read Ulysses &amp; &#20;?"
    },
    {
      "name": "filters, strip html, some HTML markup with HTML comment",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<!-- Have --><em>you</em> read <strong>Ulysses</strong> &amp; &#20;?"
      },
      "result": "you read Ulysses &amp; &#20;?"
    },
    {
      "name": "filters, strip html, not a string",
      "template": "{{ 5 | strip_html }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, strip html, unexpected argument",
      "template": "{{ \"hello\" | strip_html: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, strip html, undefined left value",
      "template": "{{ nosuchthing | strip_html }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, strip html, html block",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<div>test</div>"
      },
      "result": "test"
    },
    {
      "name": "filters, strip html, html block with id",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<div id='test'>test</div>"
      },
      "result": "test"
    },
    {
      "name": "filters, strip html, script block",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<script type='text/javascript'>document.write('some stuff');</script>"
      },
      "result": ""
    },
    {
      "name": "filters, strip html, style block",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<style type='text/css'>foo bar</style>"
      },
      "result": ""
    },
    {
      "name": "filters, strip html, html block with newline",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<div\nclass='multiline'>test</div>"
      },
      "result": "test"
    },
    {
      "name": "filters, strip html, html comment with newline",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<!-- foo bar \n test -->test"
      },
      "result": "test"
    },
    {
      "name": "filters, append, concat",
      "template": "{{ \"hello\" | append: \"there\" }}",
      "data": {},
      "result": "hellothere"
    },
    {
      "name": "filters, append, not a string",
      "template": "{{ 5 | append: 'there' }}",
      "data": {},
      "result": "5there"
    },
    {
      "name": "filters, append, argument not a string",
      "template": "{{ \"hello\" | append: 5 }}",
      "data": {},
      "result": "hello5"
    },
    {
      "name": "filters, append, missing argument",
      "template": "{{ \"hello\" | append }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, append, too many arguments",
      "template": "{{ \"hello\" | append: \"how\", \"are\", \"you\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, append, undefined left value",
      "template": "{{ nosuchthing | append: \"hi\" }}",
      "data": {},
      "result": "hi"
    },
    {
      "name": "filters, append, undefined argument",
      "template": "{{ \"hi\" | append: nosuchthing }}",
      "data": {},
      "result": "hi"
    },
    {
      "name": "filters, url encode, some special URL characters",
      "template": "{{ \"email address is bob@example.com!\" | url_encode }}",
      "data": {},
      "result": "email+address+is+bob%40example.com%21"
    },
    {
      "name": "filters, url encode, not a string",
      "template": "{{ 5 | url_encode }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, url encode, unexpected argument",
      "template": "{{ \"hello\" | url_encode: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, url encode, undefined left value",
      "template": "{{ nosuchthing | url_encode }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, minus, integer value and integer arg",
      "template": "{{ 10 | minus: 2 }}",
      "data": {},
      "result": "8"
    },
    {
      "name": "filters, minus, integer value and float arg",
      "template": "{{ 10 | minus: 2.0 }}",
      "data": {},
      "result": "8.0"
    },
    {
      "name": "filters, minus, float value and float arg",
      "template": "{{ 10.1 | minus: 2.2 }}",
      "data": {},
      "result": "7.9"
    },
    {
      "name": "filters, minus, string value and string arg",
      "template": "{{ \"10.1\" | minus: \"2.2\" }}",
      "data": {},
      "result": "7.9"
    },
    {
      "name": "filters, minus, string not a number",
      "template": "{{ \"foo\" | minus: \"2.0\" }}",
      "data": {},
      "result": "-2.0"
    },
    {
      "name": "filters, minus, arg string not a number",
      "template": "{{ \"10\" | minus: \"foo\" }}",
      "data": {},
      "result": "10"
    },
    {
      "name": "filters, minus, too many args",
      "template": "{{ 5 | minus: 1, '5' }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, minus, not a string, int or float",
      "template": "{{ a | minus: 1 }}",
      "data": {
        "a": {}
      },
      "result": "-1"
    },
    {
      "name": "filters, minus, undefined left value",
      "template": "{{ nosuchthing | minus: 2 }}",
      "data": {},
      "result": "-2"
    },
    {
      "name": "filters, minus, undefined argument",
      "template": "{{ 10 | minus: nosuchthing }}",
      "data": {},
      "result": "10"
    },
    {
      "name": "filters, join, range literal join filter left value",
      "template": "{{ (1..3) | join: '#' }}",
      "data": {},
      "result": "1#2#3"
    },
    {
      "name": "filters, join, joining a string is a noop",
      "template": "{{ 'a,b' | join: '#' }}",
      "data": {},
      "result": "a,b"
    },
    {
      "name": "filters, join, joining an int is a noop",
      "template": "{{ 123 | join: '#' }}",
      "data": {},
      "result": "123"
    },
    {
      "name": "filters, join, join an array of strings",
      "template": "{{ arr | join: '#' }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "a#b"
    },
    {
      "name": "filters, join, join an array of integers",
      "template": "{{ arr | join: '#' }}",
      "data": {
        "arr": [
          1,
          2
        ]
      },
      "result": "1#2"
    },
    {
      "name": "filters, join, missing argument defaults to a space",
      "template": "{{ arr | join }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "a b"
    },
    {
      "name": "filters, join, argument is not a string",
      "template": "{{ arr | join: 5 }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "a5b"
    },
    {
      "name": "filters, join, left value contains non string",
      "template": "{{ arr | join: '#' }}",
      "data": {
        "arr": [
          "a",
          "b",
          1
        ]
      },
      "result": "a#b#1"
    },
    {
      "name": "filters, join, undefined left value",
      "template": "{{ nosuchthing | join: '#' }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, join, undefined argument",
      "template": "{{ arr | join: nosuchthing }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "ab"
    },
    {
      "name": "filters, join, too many arguments",
      "template": "{{ arr | join: '#', 42 }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, escape, make HTML-safe",
      "template": "{{ \"<p>test</p>\" | escape }}",
      "data": {},
      "result": "&lt;p&gt;test&lt;/p&gt;"
    },
    {
      "name": "filters, escape, not a string",
      "template": "{{ 5 | escape }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, escape, unexpected argument",
      "template": "{{ \"HELLO\" | escape: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, escape, undefined left value",
      "template": "{{ nosuchthing | escape }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, last, range literal last filter left value",
      "template": "{{ (1..3) | last }}",
      "data": {},
      "result": "3"
    },
    {
      "name": "filters, last, array of strings",
      "template": "{{ arr | last }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "b"
    },
    {
      "name": "filters, last, array of things",
      "template": "{{ arr | last }}",
      "data": {
        "arr": [
          "a",
          "b",
          1,
          [],
          {}
        ]
      },
      "result": "{}"
    },
    {
      "name": "filters, last, empty array",
      "template": "{{ arr | last }}",
      "data": {
        "arr": []
      },
      "result": ""
    },
    {
      "name": "filters, last, left value not an array",
      "template": "{{ arr | last }}",
      "data": {
        "arr": 12
      },
      "result": ""
    },
    {
      "name": "filters, last, left value is undefined",
      "template": "{{ nosuchthing | last }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, last, last of a string",
      "template": "{{ 'hello' | last }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, last, last of a hash",
      "template": "{{ a | last }}",
      "data": {
        "a": {
          "b": 1,
          "c": 2
        }
      },
      "result": ""
    },
    {
      "name": "filters, first, range literal first filter left value",
      "template": "{{ (1..3) | first }}",
      "data": {},
      "result": "1"
    },
    {
      "name": "filters, first, array of strings",
      "template": "{{ arr | first }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "a"
    },
    {
      "name": "filters, first, array of things",
      "template": "{{ arr | first }}",
      "data": {
        "arr": [
          "a",
          "b",
          1,
          [],
          {}
        ]
      },
      "result": "a"
    },
    {
      "name": "filters, first, empty left value",
      "template": "{{ arr | first }}",
      "data": {
        "arr": []
      },
      "result": ""
    },
    {
      "name": "filters, first, left value is not an array",
      "template": "{{ arr | first }}",
      "data": {
        "arr": 12
      },
      "result": ""
    },
    {
      "name": "filters, first, left value is undefined",
      "template": "{{ nosuchthing | first }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, first, first of a string",
      "template": "{{ 'hello' | first }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, first, first of a hash",
      "template": "{% assign x = a | first %}({{ x[0] }},{{ x[1] }})",
      "data": {
        "a": {
          "b": 1,
          "c": 2
        }
      },
      "result": "(b,1)"
    },
    {
      "name": "filters, date, well formed string",
      "template": "{{ 'March 14, 2016' | date: '%b %d, %y' }}",
      "data": {},
      "result": "Mar 14, 16"
    },
    {
      "name": "filters, date, too many arguments",
      "template": "{{ 'March 14, 2016' | date: '%b %d, %y', 'foo' }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, date, undefined left value",
      "template": "{{ nosuchthing | date: '%b %d, %y' }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, date, missing argument",
      "template": "{{ 'March 14, 2016' | date }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, date, undefined argument",
      "template": "{{ 'March 14, 2016' | date: nosuchthing }}",
      "data": {},
      "result": "March 14, 2016"
    },
    {
      "name": "filters, date, literal percent",
      "template": "{{ 'March 14, 2016' | date: '%%%b %d, %y' }}",
      "data": {},
      "result": "%Mar 14, 16"
    },
    {
      "name": "filters, date, timestamp integer",
      "template": "{{ 1152098955 | date: '%m/%d/%Y' }}",
      "data": {},
      "result": "07/05/2006"
    },
    {
      "name": "filters, date, timestamp string",
      "template": "{{ '1152098955' | date: '%m/%d/%Y' }}",
      "data": {},
      "result": "07/05/2006"
    },
    {
      "name": "filters, date, negative timestamp string",
      "template": "{{ '-1152098955' | date: '%m/%d/%Y' }}",
      "data": {},
      "result": "-1152098955"
    },
    {
      "name": "filters, date, seconds since epoch format directive",
      "template": "{{ 'March 14, 2016' | date: '%s' }}",
      "data": {},
      "result": "1457913600"
    },
    {
      "name": "filters, escape once, make HTML-safe",
      "template": "{{ \"&lt;p&gt;test&lt;/p&gt;\" | escape_once }}",
      "data": {},
      "result": "&lt;p&gt;test&lt;/p&gt;"
    },
    {
      "name": "filters, escape once, make HTML-safe from mixed safe and markup.",
      "template": "{{ \"&lt;p&gt;test&lt;/p&gt;<p>test</p>\" | escape_once }}",
      "data": {},
      "result": "&lt;p&gt;test&lt;/p&gt;&lt;p&gt;test&lt;/p&gt;"
    },
    {
      "name": "filters, escape once, not a string",
      "template": "{{ 5 | escape_once }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, escape once, unexpected argument",
      "template": "{{ \"HELLO\" | escape_once: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, escape once, undefined left value",
      "template": "{{ nosuchthing | escape_once }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, truncatewords, default end",
      "template": "{{ \"Ground control to Major Tom.\" | truncatewords: 3 }}",
      "data": {},
      "result": "Ground control to..."
    },
    {
      "name": "filters, truncatewords, custom end",
      "template": "{{ \"Ground control to Major Tom.\" | truncatewords: 3, \"--\" }}",
      "data": {},
      "result": "Ground control to--"
    },
    {
      "name": "filters, truncatewords, no end",
      "template": "{{ \"Ground control to Major Tom.\" | truncatewords: 3, \"\" }}",
      "data": {},
      "result": "Ground control to"
    },
    {
      "name": "filters, truncatewords, fewer words than word count",
      "template": "{{ \"Ground control\" | truncatewords: 3 }}",
      "data": {},
      "result": "Ground control"
    },
    {
      "name": "filters, truncatewords, not a string",
      "template": "{{ 5 | truncatewords: 10 }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, truncatewords, too many arguments",
      "template": "{{ \"hello\" | truncatewords: 5, \"foo\", \"bar\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, truncatewords, reference implementation test 1",
      "template": "{{ \"\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\" | truncatewords: 5 }}",
      "data": {},
      "result": "\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5\u6d4b\u8bd5"
    },
    {
      "name": "filters, truncatewords, reference implementation test 2",
      "template": "{{ \"one two three\" | truncatewords: 2, 1 }}",
      "data": {},
      "result": "one two1"
    },
    {
      "name": "filters, truncatewords, reference implementation test 3",
      "template": "{{ \"one  two\tthree\nfour\" | truncatewords: 3 }}",
      "data": {},
      "result": "one two three..."
    },
    {
      "name": "filters, truncatewords, reference implementation test 4",
      "template": "{{ \"one two three four\" | truncatewords: 2 }}",
      "data": {},
      "result": "one two..."
    },
    {
      "name": "filters, truncatewords, reference implementation test 5",
      "template": "{{ \"one two three four\" | truncatewords: 0 }}",
      "data": {},
      "result": "one..."
    },
    {
      "name": "filters, truncatewords, undefined left value",
      "template": "{{ nosuchthing | truncatewords: 5 }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, truncatewords, undefined first argument",
      "template": "{{ \"one two three four\" | truncatewords: nosuchthing }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, truncatewords, undefined second argument",
      "template": "{{ \"one two three four\" | truncatewords: 2, nosuchthing }}",
      "data": {},
      "result": "one two"
    },
    {
      "name": "filters, truncatewords, number of words defaults to 15",
      "template": "{{ \"a b c d e f g h i j k l m n o p q\" | truncatewords }}",
      "data": {},
      "result": "a b c d e f g h i j k l m n o..."
    },
    {
      "name": "filters, truncatewords, all whitespace is clobbered",
      "template": "{{ \"    one    two three    four  \" | truncatewords: 2 }}",
      "data": {},
      "result": "one two..."
    },
    {
      "name": "filters, newline to br, string with newlines",
      "template": "{{ \"- apples\n- oranges\n\" | newline_to_br }}",
      "data": {},
      "result": "- apples<br />\n- oranges<br />\n"
    },
    {
      "name": "filters, newline to br, not a string",
      "template": "{{ 5 | newline_to_br }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, newline to br, unexpected argument",
      "template": "{{ \"hello\" | newline_to_br: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, newline to br, reference implementation test 1",
      "template": "{{ \"a\nb\nc\" | newline_to_br }}",
      "data": {},
      "result": "a<br />\nb<br />\nc"
    },
    {
      "name": "filters, newline to br, reference implementation test 2",
      "template": "{{ \"a\r\nb\nc\" | newline_to_br }}",
      "data": {},
      "result": "a<br />\nb<br />\nc"
    },
    {
      "name": "filters, newline to br, undefined left value",
      "template": "{{ nosuchthing | newline_to_br }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, truncate, default end",
      "template": "{{ \"Ground control to Major Tom.\" | truncate: 20 }}",
      "data": {},
      "result": "Ground control to..."
    },
    {
      "name": "filters, truncate, custom end",
      "template": "{{ \"Ground control to Major Tom.\" | truncate: 25, \", and so on\" }}",
      "data": {},
      "result": "Ground control, and so on"
    },
    {
      "name": "filters, truncate, no end",
      "template": "{{ \"Ground control to Major Tom.\" | truncate: 20, \"\" }}",
      "data": {},
      "result": "Ground control to Ma"
    },
    {
      "name": "filters, truncate, string is shorter than length",
      "template": "{{ \"Ground control\" | truncate: 20 }}",
      "data": {},
      "result": "Ground control"
    },
    {
      "name": "filters, truncate, not a string",
      "template": "{{ 5 | truncate: 10 }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, truncate, too many arguments",
      "template": "{{ \"hello\" | truncate: 5, \"foo\", \"bar\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, truncate, undefined left value",
      "template": "{{ nosuchthing | truncate: 5 }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, truncate, undefined first argument",
      "template": "{{ \"Ground control to Major Tom.\" | truncate: nosuchthing }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, truncate, undefined second argument",
      "template": "{{ \"Ground control to Major Tom.\" | truncate: 20, nosuchthing }}",
      "data": {},
      "result": "Ground control to Ma"
    },
    {
      "name": "filters, truncate, default length is 50",
      "template": "{{ \"Ground control to Major Tom. Ground control to Major Tom.\" | truncate }}",
      "data": {},
      "result": "Ground control to Major Tom. Ground control to ..."
    },
    {
      "name": "filters, reverse, array of strings",
      "template": "{{ a | reverse | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a",
          "B",
          "A"
        ]
      },
      "result": "A#B#a#b"
    },
    {
      "name": "filters, reverse, array of things",
      "template": "{{ a | reverse | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b",
          1,
          [],
          {}
        ]
      },
      "result": "{}#1#b#a"
    },
    {
      "name": "filters, reverse, empty array",
      "template": "{{ a | reverse | join: '#' }}",
      "data": {
        "a": []
      },
      "result": ""
    },
    {
      "name": "filters, reverse, unexpected argument",
      "template": "{{ a | reverse: 0 | join: '#' }}",
      "data": {
        "a": []
      },
      "invalid": true
    },
    {
      "name": "filters, reverse, left value not an array",
      "template": "{{ a | reverse | join: '#' }}",
      "data": {
        "a": 123
      },
      "result": "123"
    },
    {
      "name": "filters, reverse, left value is undefined",
      "template": "{{ nosuchthing | reverse | join: '#' }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, map, array of objects",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": "baz"
          }
        ]
      },
      "result": "foo#bar#baz"
    },
    {
      "name": "filters, map, missing property",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "heading": "baz"
          }
        ]
      },
      "result": "foo#bar#"
    },
    {
      "name": "filters, map, left value not an array",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": 123
      },
      "invalid": true
    },
    {
      "name": "filters, map, array containing a non object",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          5,
          []
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, map, undefined argument",
      "template": "{{ a | map: nosuchthing | join: '#' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          }
        ]
      },
      "result": "#"
    },
    {
      "name": "filters, map, nested arrays get flattened",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          [
            {
              "title": "bar"
            },
            {
              "title": "baz"
            }
          ]
        ]
      },
      "result": "foo#bar#baz"
    },
    {
      "name": "filters, map, input is a hash",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": {
          "title": "foo",
          "some": "thing"
        }
      },
      "result": "foo"
    },
    {
      "name": "filters, url decode, some special URL characters",
      "template": "{{ \"email+address+is+bob%40example.com%21\" | url_decode }}",
      "data": {},
      "result": "email address is bob@example.com!"
    },
    {
      "name": "filters, url decode, not a string",
      "template": "{{ 5 | url_decode }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, url decode, unexpected argument",
      "template": "{{ \"hello\" | url_decode: 5 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, url decode, undefined left value",
      "template": "{{ nosuchthing | url_decode }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, divided by, integer value and integer arg",
      "template": "{{ 10 | divided_by: 2 }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, divided by, integer value and float arg",
      "template": "{{ 10 | divided_by: 2.0 }}",
      "data": {},
      "result": "5.0"
    },
    {
      "name": "filters, divided by, integer division",
      "template": "{{ 9 | divided_by: 2 }}",
      "data": {},
      "result": "4"
    },
    {
      "name": "filters, divided by, float value and integer arg",
      "template": "{{ 9.0 | divided_by: 2 }}",
      "data": {},
      "result": "4.5"
    },
    {
      "name": "filters, divided by, float division",
      "template": "{{ 20 | divided_by: 7.0 }}",
      "data": {},
      "result": "2.857142857142857"
    },
    {
      "name": "filters, divided by, string value and argument",
      "template": "{{ \"10\" | divided_by: \"2\" }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, divided by, string not a number",
      "template": "{{ \"foo\" | divided_by: \"2\" }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, divided by, arg string not a number",
      "template": "{{ \"10\" | divided_by: \"foo\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, divided by, too many args",
      "template": "{{ 5 | divided_by: 1, '5' }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, divided by, not a string, int or float",
      "template": "{{ a | divided_by: 1 }}",
      "data": {
        "a": {}
      },
      "result": "0"
    },
    {
      "name": "filters, divided by, undefined left value",
      "template": "{{ nosuchthing | divided_by: 2 }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, divided by, undefined argument",
      "template": "{{ 10 | divided_by: nosuchthing }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, divided by, divied by zero",
      "template": "{{ 10 | divided_by: 0 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, divided by, zero divided by float",
      "template": "{{ 0 | divided_by: 1.1 }}",
      "data": {},
      "result": "0.0"
    },
    {
      "name": "filters, divided by, zero divided by integer",
      "template": "{{ 0 | divided_by: 1 }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, divided by, issue",
      "template": "{{ 5 | divided_by: 3 }}",
      "data": {},
      "result": "1"
    },
    {
      "name": "filters, divided by, render",
      "template": "{{ 5.0 }} {{ 5 }}",
      "data": {},
      "result": "5.0 5"
    },
    {
      "name": "filters, divided by, left value is an empty string",
      "template": "{{ '' | divided_by: 2 }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, remove last, remove substrings",
      "template": "{{ \"I strained to see the train through the rain\" | remove_last: \"rain\" }}",
      "data": {},
      "result": "I strained to see the train through the "
    },
    {
      "name": "filters, remove last, not a string",
      "template": "{{ 5 | remove_last: 'rain' }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, remove last, argument not a string",
      "template": "{{ \"hello\" | remove_last: 5 }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, remove last, missing argument",
      "template": "{{ \"hello\" | remove_last }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, remove last, too many arguments",
      "template": "{{ \"hello\" | remove_last: \"how\", \"are\", \"you\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, remove last, undefined left value",
      "template": "{{ nosuchthing | remove_last: \"rain\" }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, remove last, undefined argument",
      "template": "{{ \"hello\" | remove_last: nosuchthing }}",
      "data": {},
      "result": "hello"
    },
    {
      "name": "filters, ceil, positive integer",
      "template": "{{ 5 | ceil }}",
      "data": {},
      "result": "5"
    },
    {
      "name": "filters, ceil, negative integer",
      "template": "{{ -5 | ceil }}",
      "data": {},
      "result": "-5"
    },
    {
      "name": "filters, ceil, positive float",
      "template": "{{ 5.4 | ceil }}",
      "data": {},
      "result": "6"
    },
    {
      "name": "filters, ceil, negative float",
      "template": "{{ -5.4 | ceil }}",
      "data": {},
      "result": "-5"
    },
    {
      "name": "filters, ceil, zero",
      "template": "{{ 0 | ceil }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, ceil, positive string float",
      "template": "{{ \"5.1\" | ceil }}",
      "data": {},
      "result": "6"
    },
    {
      "name": "filters, ceil, negative string float",
      "template": "{{ \"-5.1\" | ceil }}",
      "data": {},
      "result": "-5"
    },
    {
      "name": "filters, ceil, unexpected argument",
      "template": "{{ -3.1 | ceil: 1 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, ceil, string not a number",
      "template": "{{ \"hello\" | ceil }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, ceil, not a string, int or float",
      "template": "{{ a | ceil }}",
      "data": {
        "a": {}
      },
      "result": "0"
    },
    {
      "name": "filters, ceil, undefined left value",
      "template": "{{ nosuchthing | ceil }}",
      "data": {},
      "result": "0"
    },
    {
      "name": "filters, slice, zero",
      "template": "{{ \"hello\" | slice: 0 }}",
      "data": {},
      "result": "h"
    },
    {
      "name": "filters, slice, one",
      "template": "{{ \"hello\" | slice: 1 }}",
      "data": {},
      "result": "e"
    },
    {
      "name": "filters, slice, one length three",
      "template": "{{ \"hello\" | slice: 1, 3 }}",
      "data": {},
      "result": "ell"
    },
    {
      "name": "filters, slice, out of range",
      "template": "{{ \"hello\" | slice: 99 }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, slice, not a string",
      "template": "{{ 5 | slice: 1 }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, slice, first argument is a string",
      "template": "{{ \"hello\" | slice: \"2\" }}",
      "data": {},
      "result": "l"
    },
    {
      "name": "filters, slice, first argument not an integer",
      "template": "{{ \"hello\" | slice: \"foo\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, slice, second argument not an integer",
      "template": "{{ \"hello\" | slice: 5, \"foo\" }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, slice, second argument is a string",
      "template": "{{ \"hello\" | slice: 3, \"2\" }}",
      "data": {},
      "result": "lo"
    },
    {
      "name": "filters, slice, missing arguments",
      "template": "{{ \"hello\" | slice }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, slice, too many arguments",
      "template": "{{ \"hello\" | slice: 1, 2, 3 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, slice, undefined left value",
      "template": "{{ nosuchthing | slice: 1, 3 }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, slice, undefined first argument",
      "template": "{{ \"hello\" | slice: nosuchthing, 3 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, slice, undefined second argument",
      "template": "{{ \"hello\" | slice: 1, nosuchthing }}",
      "data": {},
      "result": "e"
    },
    {
      "name": "filters, slice, slice an array of numbers",
      "template": "{{ a | slice: 2, 3 | join: '#' }}",
      "data": {
        "a": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "3#4#5"
    },
    {
      "name": "filters, slice, first argument is a float",
      "template": "{{ 'Liquid' | slice: 2.2 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, slice, second argument is a float",
      "template": "{{ 'Liquid' | slice: 1, 2.2 }}",
      "data": {},
      "invalid": true
    },
    {
      "name": "filters, slice, negative first argument",
      "template": "{{ 'Liquid' | slice: -2 }}",
      "data": {},
      "result": "i"
    },
    {
      "name": "filters, slice, negative first argument and positive length",
      "template": "{{ 'Liquid' | slice: -2, 2 }}",
      "data": {},
      "result": "id"
    },
    {
      "name": "filters, slice, negative first argument and negative length",
      "template": "{{ 'Liquid' | slice: -2, -1 }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, slice, negative first argument and length out of range",
      "template": "{{ 'Liquid' | slice: -2, 99 }}",
      "data": {},
      "result": "id"
    },
    {
      "name": "filters, where, array of hashes",
      "template": "{% assign x = a | where: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(title,foo)(title,bar)"
    },
    {
      "name": "filters, where, array of hashes with equality test",
      "template": "{% assign x = a | where: 'title', 'bar' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(title,bar)"
    },
    {
      "name": "filters, where, array of hashes with a missing key",
      "template": "{% assign x = a | where: 'title', 'bar' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "heading": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(title,bar)"
    },
    {
      "name": "filters, where, left value is not an array",
      "template": "{{ a | where: 'title' }}",
      "data": {
        "a": 123
      },
      "invalid": true
    },
    {
      "name": "filters, where, missing argument",
      "template": "{{ a | where }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, where, too many arguments",
      "template": "{{ a | where: 'title', 'foo', 'bar' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, where, left value is undefined",
      "template": "{{ nosuchthing | where: 'title' }}",
      "data": {},
      "result": ""
    },
    {
      "name": "filters, where, first argument is undefined",
      "template": "{{ a | where: nosuchthing }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": ""
    },
    {
      "name": "filters, where, second argument is undefined",
      "template": "{% assign x = a | where: 'title', nosuchthing %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(title,foo)(title,bar)"
    },
    {
      "name": "filters, where, both arguments are undefined",
      "template": "{{ a | where: nosuchthing, nothing }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": ""
    },
    {
      "name": "filters, where, value is false",
      "template": "{% assign x =  a | where: 'b', false %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "b": false
          },
          {
            "b": "bar"
          },
          {
            "b": null
          }
        ]
      },
      "result": "(b,false)"
    },
    {
      "name": "filters, where, value is explicit nil",
      "template": "{% assign x =  a | where: 'b', nil %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "b": false
          },
          {
            "b": "bar"
          },
          {
            "b": null
          }
        ]
      },
      "result": "(b,bar)"
    }
  ]
}